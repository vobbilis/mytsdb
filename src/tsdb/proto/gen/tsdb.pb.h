// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: tsdb.proto
// Protobuf C++ Version: 5.29.3

#ifndef tsdb_2eproto_2epb_2eh
#define tsdb_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tsdb_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_tsdb_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_tsdb_2eproto;
namespace tsdb {
namespace proto {
class Label;
struct LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class LabelMatcher;
struct LabelMatcherDefaultTypeInternal;
extern LabelMatcherDefaultTypeInternal _LabelMatcher_default_instance_;
class LabelNamesResponse;
struct LabelNamesResponseDefaultTypeInternal;
extern LabelNamesResponseDefaultTypeInternal _LabelNamesResponse_default_instance_;
class LabelValuesRequest;
struct LabelValuesRequestDefaultTypeInternal;
extern LabelValuesRequestDefaultTypeInternal _LabelValuesRequest_default_instance_;
class LabelValuesResponse;
struct LabelValuesResponseDefaultTypeInternal;
extern LabelValuesResponseDefaultTypeInternal _LabelValuesResponse_default_instance_;
class QueryParams;
struct QueryParamsDefaultTypeInternal;
extern QueryParamsDefaultTypeInternal _QueryParams_default_instance_;
class Sample;
struct SampleDefaultTypeInternal;
extern SampleDefaultTypeInternal _Sample_default_instance_;
class SeriesResponse;
struct SeriesResponseDefaultTypeInternal;
extern SeriesResponseDefaultTypeInternal _SeriesResponse_default_instance_;
class TimeRange;
struct TimeRangeDefaultTypeInternal;
extern TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
class TimeSeries;
struct TimeSeriesDefaultTypeInternal;
extern TimeSeriesDefaultTypeInternal _TimeSeries_default_instance_;
}  // namespace proto
}  // namespace tsdb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tsdb {
namespace proto {
enum LabelMatcher_Type : int {
  LabelMatcher_Type_EQ = 0,
  LabelMatcher_Type_NEQ = 1,
  LabelMatcher_Type_RE = 2,
  LabelMatcher_Type_NRE = 3,
  LabelMatcher_Type_LabelMatcher_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LabelMatcher_Type_LabelMatcher_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LabelMatcher_Type_IsValid(int value);
extern const uint32_t LabelMatcher_Type_internal_data_[];
constexpr LabelMatcher_Type LabelMatcher_Type_Type_MIN = static_cast<LabelMatcher_Type>(0);
constexpr LabelMatcher_Type LabelMatcher_Type_Type_MAX = static_cast<LabelMatcher_Type>(3);
constexpr int LabelMatcher_Type_Type_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
LabelMatcher_Type_descriptor();
template <typename T>
const std::string& LabelMatcher_Type_Name(T value) {
  static_assert(std::is_same<T, LabelMatcher_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return LabelMatcher_Type_Name(static_cast<LabelMatcher_Type>(value));
}
template <>
inline const std::string& LabelMatcher_Type_Name(LabelMatcher_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LabelMatcher_Type_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool LabelMatcher_Type_Parse(absl::string_view name, LabelMatcher_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LabelMatcher_Type>(
      LabelMatcher_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TimeRange final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tsdb.proto.TimeRange) */ {
 public:
  inline TimeRange() : TimeRange(nullptr) {}
  ~TimeRange() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TimeRange* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TimeRange));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TimeRange(
      ::google::protobuf::internal::ConstantInitialized);

  inline TimeRange(const TimeRange& from) : TimeRange(nullptr, from) {}
  inline TimeRange(TimeRange&& from) noexcept
      : TimeRange(nullptr, std::move(from)) {}
  inline TimeRange& operator=(const TimeRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeRange& operator=(TimeRange&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeRange* internal_default_instance() {
    return reinterpret_cast<const TimeRange*>(
        &_TimeRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TimeRange& a, TimeRange& b) { a.Swap(&b); }
  inline void Swap(TimeRange* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeRange* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeRange* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TimeRange>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TimeRange& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TimeRange& from) { TimeRange::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TimeRange* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tsdb.proto.TimeRange"; }

 protected:
  explicit TimeRange(::google::protobuf::Arena* arena);
  TimeRange(::google::protobuf::Arena* arena, const TimeRange& from);
  TimeRange(::google::protobuf::Arena* arena, TimeRange&& from) noexcept
      : TimeRange(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
  };
  // int64 start_time = 1;
  void clear_start_time() ;
  ::int64_t start_time() const;
  void set_start_time(::int64_t value);

  private:
  ::int64_t _internal_start_time() const;
  void _internal_set_start_time(::int64_t value);

  public:
  // int64 end_time = 2;
  void clear_end_time() ;
  ::int64_t end_time() const;
  void set_end_time(::int64_t value);

  private:
  ::int64_t _internal_end_time() const;
  void _internal_set_end_time(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tsdb.proto.TimeRange)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TimeRange& from_msg);
    ::int64_t start_time_;
    ::int64_t end_time_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tsdb_2eproto;
};
// -------------------------------------------------------------------

class Sample final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tsdb.proto.Sample) */ {
 public:
  inline Sample() : Sample(nullptr) {}
  ~Sample() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Sample* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Sample));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Sample(
      ::google::protobuf::internal::ConstantInitialized);

  inline Sample(const Sample& from) : Sample(nullptr, from) {}
  inline Sample(Sample&& from) noexcept
      : Sample(nullptr, std::move(from)) {}
  inline Sample& operator=(const Sample& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sample& operator=(Sample&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sample& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sample* internal_default_instance() {
    return reinterpret_cast<const Sample*>(
        &_Sample_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Sample& a, Sample& b) { a.Swap(&b); }
  inline void Swap(Sample* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sample* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sample* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Sample>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Sample& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Sample& from) { Sample::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Sample* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tsdb.proto.Sample"; }

 protected:
  explicit Sample(::google::protobuf::Arena* arena);
  Sample(::google::protobuf::Arena* arena, const Sample& from);
  Sample(::google::protobuf::Arena* arena, Sample&& from) noexcept
      : Sample(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimestampFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int64 timestamp = 1;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // double value = 2;
  void clear_value() ;
  double value() const;
  void set_value(double value);

  private:
  double _internal_value() const;
  void _internal_set_value(double value);

  public:
  // @@protoc_insertion_point(class_scope:tsdb.proto.Sample)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Sample& from_msg);
    ::int64_t timestamp_;
    double value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tsdb_2eproto;
};
// -------------------------------------------------------------------

class LabelValuesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tsdb.proto.LabelValuesResponse) */ {
 public:
  inline LabelValuesResponse() : LabelValuesResponse(nullptr) {}
  ~LabelValuesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LabelValuesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LabelValuesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LabelValuesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline LabelValuesResponse(const LabelValuesResponse& from) : LabelValuesResponse(nullptr, from) {}
  inline LabelValuesResponse(LabelValuesResponse&& from) noexcept
      : LabelValuesResponse(nullptr, std::move(from)) {}
  inline LabelValuesResponse& operator=(const LabelValuesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelValuesResponse& operator=(LabelValuesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LabelValuesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabelValuesResponse* internal_default_instance() {
    return reinterpret_cast<const LabelValuesResponse*>(
        &_LabelValuesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(LabelValuesResponse& a, LabelValuesResponse& b) { a.Swap(&b); }
  inline void Swap(LabelValuesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelValuesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LabelValuesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LabelValuesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LabelValuesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LabelValuesResponse& from) { LabelValuesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LabelValuesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tsdb.proto.LabelValuesResponse"; }

 protected:
  explicit LabelValuesResponse(::google::protobuf::Arena* arena);
  LabelValuesResponse(::google::protobuf::Arena* arena, const LabelValuesResponse& from);
  LabelValuesResponse(::google::protobuf::Arena* arena, LabelValuesResponse&& from) noexcept
      : LabelValuesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_values(int index, Arg_&& value, Args_... args);
  std::string* add_values();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_values(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:tsdb.proto.LabelValuesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LabelValuesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> values_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tsdb_2eproto;
};
// -------------------------------------------------------------------

class LabelNamesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tsdb.proto.LabelNamesResponse) */ {
 public:
  inline LabelNamesResponse() : LabelNamesResponse(nullptr) {}
  ~LabelNamesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LabelNamesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LabelNamesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LabelNamesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline LabelNamesResponse(const LabelNamesResponse& from) : LabelNamesResponse(nullptr, from) {}
  inline LabelNamesResponse(LabelNamesResponse&& from) noexcept
      : LabelNamesResponse(nullptr, std::move(from)) {}
  inline LabelNamesResponse& operator=(const LabelNamesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelNamesResponse& operator=(LabelNamesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LabelNamesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabelNamesResponse* internal_default_instance() {
    return reinterpret_cast<const LabelNamesResponse*>(
        &_LabelNamesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(LabelNamesResponse& a, LabelNamesResponse& b) { a.Swap(&b); }
  inline void Swap(LabelNamesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelNamesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LabelNamesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LabelNamesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LabelNamesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LabelNamesResponse& from) { LabelNamesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LabelNamesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tsdb.proto.LabelNamesResponse"; }

 protected:
  explicit LabelNamesResponse(::google::protobuf::Arena* arena);
  LabelNamesResponse(::google::protobuf::Arena* arena, const LabelNamesResponse& from);
  LabelNamesResponse(::google::protobuf::Arena* arena, LabelNamesResponse&& from) noexcept
      : LabelNamesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNamesFieldNumber = 1,
  };
  // repeated string names = 1;
  int names_size() const;
  private:
  int _internal_names_size() const;

  public:
  void clear_names() ;
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_names(int index, Arg_&& value, Args_... args);
  std::string* add_names();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_names(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_names();

  public:
  // @@protoc_insertion_point(class_scope:tsdb.proto.LabelNamesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LabelNamesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> names_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tsdb_2eproto;
};
// -------------------------------------------------------------------

class LabelMatcher final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tsdb.proto.LabelMatcher) */ {
 public:
  inline LabelMatcher() : LabelMatcher(nullptr) {}
  ~LabelMatcher() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LabelMatcher* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LabelMatcher));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LabelMatcher(
      ::google::protobuf::internal::ConstantInitialized);

  inline LabelMatcher(const LabelMatcher& from) : LabelMatcher(nullptr, from) {}
  inline LabelMatcher(LabelMatcher&& from) noexcept
      : LabelMatcher(nullptr, std::move(from)) {}
  inline LabelMatcher& operator=(const LabelMatcher& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelMatcher& operator=(LabelMatcher&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LabelMatcher& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabelMatcher* internal_default_instance() {
    return reinterpret_cast<const LabelMatcher*>(
        &_LabelMatcher_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(LabelMatcher& a, LabelMatcher& b) { a.Swap(&b); }
  inline void Swap(LabelMatcher* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelMatcher* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LabelMatcher* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LabelMatcher>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LabelMatcher& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LabelMatcher& from) { LabelMatcher::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LabelMatcher* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tsdb.proto.LabelMatcher"; }

 protected:
  explicit LabelMatcher(::google::protobuf::Arena* arena);
  LabelMatcher(::google::protobuf::Arena* arena, const LabelMatcher& from);
  LabelMatcher(::google::protobuf::Arena* arena, LabelMatcher&& from) noexcept
      : LabelMatcher(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = LabelMatcher_Type;
  static constexpr Type EQ = LabelMatcher_Type_EQ;
  static constexpr Type NEQ = LabelMatcher_Type_NEQ;
  static constexpr Type RE = LabelMatcher_Type_RE;
  static constexpr Type NRE = LabelMatcher_Type_NRE;
  static inline bool Type_IsValid(int value) {
    return LabelMatcher_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = LabelMatcher_Type_Type_MIN;
  static constexpr Type Type_MAX = LabelMatcher_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = LabelMatcher_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return LabelMatcher_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return LabelMatcher_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return LabelMatcher_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 2,
    kValueFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string value = 3;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // .tsdb.proto.LabelMatcher.Type type = 1;
  void clear_type() ;
  ::tsdb::proto::LabelMatcher_Type type() const;
  void set_type(::tsdb::proto::LabelMatcher_Type value);

  private:
  ::tsdb::proto::LabelMatcher_Type _internal_type() const;
  void _internal_set_type(::tsdb::proto::LabelMatcher_Type value);

  public:
  // @@protoc_insertion_point(class_scope:tsdb.proto.LabelMatcher)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LabelMatcher& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tsdb_2eproto;
};
// -------------------------------------------------------------------

class Label final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tsdb.proto.Label) */ {
 public:
  inline Label() : Label(nullptr) {}
  ~Label() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Label* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Label));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Label(
      ::google::protobuf::internal::ConstantInitialized);

  inline Label(const Label& from) : Label(nullptr, from) {}
  inline Label(Label&& from) noexcept
      : Label(nullptr, std::move(from)) {}
  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Label& default_instance() {
    return *internal_default_instance();
  }
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
        &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Label& a, Label& b) { a.Swap(&b); }
  inline void Swap(Label* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Label* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Label* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Label>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Label& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Label& from) { Label::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Label* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tsdb.proto.Label"; }

 protected:
  explicit Label(::google::protobuf::Arena* arena);
  Label(::google::protobuf::Arena* arena, const Label& from);
  Label(::google::protobuf::Arena* arena, Label&& from) noexcept
      : Label(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string value = 2;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:tsdb.proto.Label)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Label& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tsdb_2eproto;
};
// -------------------------------------------------------------------

class TimeSeries final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tsdb.proto.TimeSeries) */ {
 public:
  inline TimeSeries() : TimeSeries(nullptr) {}
  ~TimeSeries() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TimeSeries* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TimeSeries));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TimeSeries(
      ::google::protobuf::internal::ConstantInitialized);

  inline TimeSeries(const TimeSeries& from) : TimeSeries(nullptr, from) {}
  inline TimeSeries(TimeSeries&& from) noexcept
      : TimeSeries(nullptr, std::move(from)) {}
  inline TimeSeries& operator=(const TimeSeries& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSeries& operator=(TimeSeries&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeSeries& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeSeries* internal_default_instance() {
    return reinterpret_cast<const TimeSeries*>(
        &_TimeSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(TimeSeries& a, TimeSeries& b) { a.Swap(&b); }
  inline void Swap(TimeSeries* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSeries* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeSeries* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TimeSeries>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TimeSeries& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TimeSeries& from) { TimeSeries::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TimeSeries* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tsdb.proto.TimeSeries"; }

 protected:
  explicit TimeSeries(::google::protobuf::Arena* arena);
  TimeSeries(::google::protobuf::Arena* arena, const TimeSeries& from);
  TimeSeries(::google::protobuf::Arena* arena, TimeSeries&& from) noexcept
      : TimeSeries(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLabelsFieldNumber = 1,
    kSamplesFieldNumber = 2,
  };
  // repeated .tsdb.proto.Label labels = 1;
  int labels_size() const;
  private:
  int _internal_labels_size() const;

  public:
  void clear_labels() ;
  ::tsdb::proto::Label* mutable_labels(int index);
  ::google::protobuf::RepeatedPtrField<::tsdb::proto::Label>* mutable_labels();

  private:
  const ::google::protobuf::RepeatedPtrField<::tsdb::proto::Label>& _internal_labels() const;
  ::google::protobuf::RepeatedPtrField<::tsdb::proto::Label>* _internal_mutable_labels();
  public:
  const ::tsdb::proto::Label& labels(int index) const;
  ::tsdb::proto::Label* add_labels();
  const ::google::protobuf::RepeatedPtrField<::tsdb::proto::Label>& labels() const;
  // repeated .tsdb.proto.Sample samples = 2;
  int samples_size() const;
  private:
  int _internal_samples_size() const;

  public:
  void clear_samples() ;
  ::tsdb::proto::Sample* mutable_samples(int index);
  ::google::protobuf::RepeatedPtrField<::tsdb::proto::Sample>* mutable_samples();

  private:
  const ::google::protobuf::RepeatedPtrField<::tsdb::proto::Sample>& _internal_samples() const;
  ::google::protobuf::RepeatedPtrField<::tsdb::proto::Sample>* _internal_mutable_samples();
  public:
  const ::tsdb::proto::Sample& samples(int index) const;
  ::tsdb::proto::Sample* add_samples();
  const ::google::protobuf::RepeatedPtrField<::tsdb::proto::Sample>& samples() const;
  // @@protoc_insertion_point(class_scope:tsdb.proto.TimeSeries)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TimeSeries& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tsdb::proto::Label > labels_;
    ::google::protobuf::RepeatedPtrField< ::tsdb::proto::Sample > samples_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tsdb_2eproto;
};
// -------------------------------------------------------------------

class QueryParams final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tsdb.proto.QueryParams) */ {
 public:
  inline QueryParams() : QueryParams(nullptr) {}
  ~QueryParams() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(QueryParams* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(QueryParams));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParams(
      ::google::protobuf::internal::ConstantInitialized);

  inline QueryParams(const QueryParams& from) : QueryParams(nullptr, from) {}
  inline QueryParams(QueryParams&& from) noexcept
      : QueryParams(nullptr, std::move(from)) {}
  inline QueryParams& operator=(const QueryParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParams& operator=(QueryParams&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParams* internal_default_instance() {
    return reinterpret_cast<const QueryParams*>(
        &_QueryParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(QueryParams& a, QueryParams& b) { a.Swap(&b); }
  inline void Swap(QueryParams* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParams* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<QueryParams>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QueryParams& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QueryParams& from) { QueryParams::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(QueryParams* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tsdb.proto.QueryParams"; }

 protected:
  explicit QueryParams(::google::protobuf::Arena* arena);
  QueryParams(::google::protobuf::Arena* arena, const QueryParams& from);
  QueryParams(::google::protobuf::Arena* arena, QueryParams&& from) noexcept
      : QueryParams(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMatchersFieldNumber = 2,
    kTimeRangeFieldNumber = 1,
  };
  // repeated .tsdb.proto.LabelMatcher matchers = 2;
  int matchers_size() const;
  private:
  int _internal_matchers_size() const;

  public:
  void clear_matchers() ;
  ::tsdb::proto::LabelMatcher* mutable_matchers(int index);
  ::google::protobuf::RepeatedPtrField<::tsdb::proto::LabelMatcher>* mutable_matchers();

  private:
  const ::google::protobuf::RepeatedPtrField<::tsdb::proto::LabelMatcher>& _internal_matchers() const;
  ::google::protobuf::RepeatedPtrField<::tsdb::proto::LabelMatcher>* _internal_mutable_matchers();
  public:
  const ::tsdb::proto::LabelMatcher& matchers(int index) const;
  ::tsdb::proto::LabelMatcher* add_matchers();
  const ::google::protobuf::RepeatedPtrField<::tsdb::proto::LabelMatcher>& matchers() const;
  // .tsdb.proto.TimeRange time_range = 1;
  bool has_time_range() const;
  void clear_time_range() ;
  const ::tsdb::proto::TimeRange& time_range() const;
  PROTOBUF_NODISCARD ::tsdb::proto::TimeRange* release_time_range();
  ::tsdb::proto::TimeRange* mutable_time_range();
  void set_allocated_time_range(::tsdb::proto::TimeRange* value);
  void unsafe_arena_set_allocated_time_range(::tsdb::proto::TimeRange* value);
  ::tsdb::proto::TimeRange* unsafe_arena_release_time_range();

  private:
  const ::tsdb::proto::TimeRange& _internal_time_range() const;
  ::tsdb::proto::TimeRange* _internal_mutable_time_range();

  public:
  // @@protoc_insertion_point(class_scope:tsdb.proto.QueryParams)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const QueryParams& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tsdb::proto::LabelMatcher > matchers_;
    ::tsdb::proto::TimeRange* time_range_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tsdb_2eproto;
};
// -------------------------------------------------------------------

class SeriesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tsdb.proto.SeriesResponse) */ {
 public:
  inline SeriesResponse() : SeriesResponse(nullptr) {}
  ~SeriesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SeriesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SeriesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SeriesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SeriesResponse(const SeriesResponse& from) : SeriesResponse(nullptr, from) {}
  inline SeriesResponse(SeriesResponse&& from) noexcept
      : SeriesResponse(nullptr, std::move(from)) {}
  inline SeriesResponse& operator=(const SeriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeriesResponse& operator=(SeriesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeriesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeriesResponse* internal_default_instance() {
    return reinterpret_cast<const SeriesResponse*>(
        &_SeriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(SeriesResponse& a, SeriesResponse& b) { a.Swap(&b); }
  inline void Swap(SeriesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeriesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeriesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SeriesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SeriesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SeriesResponse& from) { SeriesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SeriesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tsdb.proto.SeriesResponse"; }

 protected:
  explicit SeriesResponse(::google::protobuf::Arena* arena);
  SeriesResponse(::google::protobuf::Arena* arena, const SeriesResponse& from);
  SeriesResponse(::google::protobuf::Arena* arena, SeriesResponse&& from) noexcept
      : SeriesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSeriesFieldNumber = 1,
  };
  // repeated .tsdb.proto.TimeSeries series = 1;
  int series_size() const;
  private:
  int _internal_series_size() const;

  public:
  void clear_series() ;
  ::tsdb::proto::TimeSeries* mutable_series(int index);
  ::google::protobuf::RepeatedPtrField<::tsdb::proto::TimeSeries>* mutable_series();

  private:
  const ::google::protobuf::RepeatedPtrField<::tsdb::proto::TimeSeries>& _internal_series() const;
  ::google::protobuf::RepeatedPtrField<::tsdb::proto::TimeSeries>* _internal_mutable_series();
  public:
  const ::tsdb::proto::TimeSeries& series(int index) const;
  ::tsdb::proto::TimeSeries* add_series();
  const ::google::protobuf::RepeatedPtrField<::tsdb::proto::TimeSeries>& series() const;
  // @@protoc_insertion_point(class_scope:tsdb.proto.SeriesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SeriesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tsdb::proto::TimeSeries > series_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tsdb_2eproto;
};
// -------------------------------------------------------------------

class LabelValuesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tsdb.proto.LabelValuesRequest) */ {
 public:
  inline LabelValuesRequest() : LabelValuesRequest(nullptr) {}
  ~LabelValuesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LabelValuesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LabelValuesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LabelValuesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline LabelValuesRequest(const LabelValuesRequest& from) : LabelValuesRequest(nullptr, from) {}
  inline LabelValuesRequest(LabelValuesRequest&& from) noexcept
      : LabelValuesRequest(nullptr, std::move(from)) {}
  inline LabelValuesRequest& operator=(const LabelValuesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelValuesRequest& operator=(LabelValuesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LabelValuesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabelValuesRequest* internal_default_instance() {
    return reinterpret_cast<const LabelValuesRequest*>(
        &_LabelValuesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(LabelValuesRequest& a, LabelValuesRequest& b) { a.Swap(&b); }
  inline void Swap(LabelValuesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelValuesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LabelValuesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LabelValuesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LabelValuesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LabelValuesRequest& from) { LabelValuesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LabelValuesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tsdb.proto.LabelValuesRequest"; }

 protected:
  explicit LabelValuesRequest(::google::protobuf::Arena* arena);
  LabelValuesRequest(::google::protobuf::Arena* arena, const LabelValuesRequest& from);
  LabelValuesRequest(::google::protobuf::Arena* arena, LabelValuesRequest&& from) noexcept
      : LabelValuesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLabelNameFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string label_name = 1;
  void clear_label_name() ;
  const std::string& label_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label_name(Arg_&& arg, Args_... args);
  std::string* mutable_label_name();
  PROTOBUF_NODISCARD std::string* release_label_name();
  void set_allocated_label_name(std::string* value);

  private:
  const std::string& _internal_label_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label_name(
      const std::string& value);
  std::string* _internal_mutable_label_name();

  public:
  // .tsdb.proto.QueryParams params = 2;
  bool has_params() const;
  void clear_params() ;
  const ::tsdb::proto::QueryParams& params() const;
  PROTOBUF_NODISCARD ::tsdb::proto::QueryParams* release_params();
  ::tsdb::proto::QueryParams* mutable_params();
  void set_allocated_params(::tsdb::proto::QueryParams* value);
  void unsafe_arena_set_allocated_params(::tsdb::proto::QueryParams* value);
  ::tsdb::proto::QueryParams* unsafe_arena_release_params();

  private:
  const ::tsdb::proto::QueryParams& _internal_params() const;
  ::tsdb::proto::QueryParams* _internal_mutable_params();

  public:
  // @@protoc_insertion_point(class_scope:tsdb.proto.LabelValuesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LabelValuesRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr label_name_;
    ::tsdb::proto::QueryParams* params_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tsdb_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Sample

// int64 timestamp = 1;
inline void Sample::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t Sample::timestamp() const {
  // @@protoc_insertion_point(field_get:tsdb.proto.Sample.timestamp)
  return _internal_timestamp();
}
inline void Sample::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:tsdb.proto.Sample.timestamp)
}
inline ::int64_t Sample::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void Sample::_internal_set_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// double value = 2;
inline void Sample::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline double Sample::value() const {
  // @@protoc_insertion_point(field_get:tsdb.proto.Sample.value)
  return _internal_value();
}
inline void Sample::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:tsdb.proto.Sample.value)
}
inline double Sample::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void Sample::_internal_set_value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// Label

// string name = 1;
inline void Label::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Label::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tsdb.proto.Label.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Label::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tsdb.proto.Label.name)
}
inline std::string* Label::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tsdb.proto.Label.name)
  return _s;
}
inline const std::string& Label::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Label::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Label::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Label::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tsdb.proto.Label.name)
  return _impl_.name_.Release();
}
inline void Label::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tsdb.proto.Label.name)
}

// string value = 2;
inline void Label::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Label::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tsdb.proto.Label.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Label::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tsdb.proto.Label.value)
}
inline std::string* Label::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:tsdb.proto.Label.value)
  return _s;
}
inline const std::string& Label::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void Label::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* Label::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* Label::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tsdb.proto.Label.value)
  return _impl_.value_.Release();
}
inline void Label::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tsdb.proto.Label.value)
}

// -------------------------------------------------------------------

// TimeSeries

// repeated .tsdb.proto.Label labels = 1;
inline int TimeSeries::_internal_labels_size() const {
  return _internal_labels().size();
}
inline int TimeSeries::labels_size() const {
  return _internal_labels_size();
}
inline void TimeSeries::clear_labels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.labels_.Clear();
}
inline ::tsdb::proto::Label* TimeSeries::mutable_labels(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tsdb.proto.TimeSeries.labels)
  return _internal_mutable_labels()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tsdb::proto::Label>* TimeSeries::mutable_labels()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tsdb.proto.TimeSeries.labels)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_labels();
}
inline const ::tsdb::proto::Label& TimeSeries::labels(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tsdb.proto.TimeSeries.labels)
  return _internal_labels().Get(index);
}
inline ::tsdb::proto::Label* TimeSeries::add_labels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tsdb::proto::Label* _add = _internal_mutable_labels()->Add();
  // @@protoc_insertion_point(field_add:tsdb.proto.TimeSeries.labels)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tsdb::proto::Label>& TimeSeries::labels() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tsdb.proto.TimeSeries.labels)
  return _internal_labels();
}
inline const ::google::protobuf::RepeatedPtrField<::tsdb::proto::Label>&
TimeSeries::_internal_labels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.labels_;
}
inline ::google::protobuf::RepeatedPtrField<::tsdb::proto::Label>*
TimeSeries::_internal_mutable_labels() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.labels_;
}

// repeated .tsdb.proto.Sample samples = 2;
inline int TimeSeries::_internal_samples_size() const {
  return _internal_samples().size();
}
inline int TimeSeries::samples_size() const {
  return _internal_samples_size();
}
inline void TimeSeries::clear_samples() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.samples_.Clear();
}
inline ::tsdb::proto::Sample* TimeSeries::mutable_samples(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tsdb.proto.TimeSeries.samples)
  return _internal_mutable_samples()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tsdb::proto::Sample>* TimeSeries::mutable_samples()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tsdb.proto.TimeSeries.samples)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_samples();
}
inline const ::tsdb::proto::Sample& TimeSeries::samples(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tsdb.proto.TimeSeries.samples)
  return _internal_samples().Get(index);
}
inline ::tsdb::proto::Sample* TimeSeries::add_samples() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tsdb::proto::Sample* _add = _internal_mutable_samples()->Add();
  // @@protoc_insertion_point(field_add:tsdb.proto.TimeSeries.samples)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tsdb::proto::Sample>& TimeSeries::samples() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tsdb.proto.TimeSeries.samples)
  return _internal_samples();
}
inline const ::google::protobuf::RepeatedPtrField<::tsdb::proto::Sample>&
TimeSeries::_internal_samples() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.samples_;
}
inline ::google::protobuf::RepeatedPtrField<::tsdb::proto::Sample>*
TimeSeries::_internal_mutable_samples() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.samples_;
}

// -------------------------------------------------------------------

// LabelMatcher

// .tsdb.proto.LabelMatcher.Type type = 1;
inline void LabelMatcher::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::tsdb::proto::LabelMatcher_Type LabelMatcher::type() const {
  // @@protoc_insertion_point(field_get:tsdb.proto.LabelMatcher.type)
  return _internal_type();
}
inline void LabelMatcher::set_type(::tsdb::proto::LabelMatcher_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tsdb.proto.LabelMatcher.type)
}
inline ::tsdb::proto::LabelMatcher_Type LabelMatcher::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tsdb::proto::LabelMatcher_Type>(_impl_.type_);
}
inline void LabelMatcher::_internal_set_type(::tsdb::proto::LabelMatcher_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string name = 2;
inline void LabelMatcher::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LabelMatcher::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tsdb.proto.LabelMatcher.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LabelMatcher::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tsdb.proto.LabelMatcher.name)
}
inline std::string* LabelMatcher::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tsdb.proto.LabelMatcher.name)
  return _s;
}
inline const std::string& LabelMatcher::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void LabelMatcher::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* LabelMatcher::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* LabelMatcher::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tsdb.proto.LabelMatcher.name)
  return _impl_.name_.Release();
}
inline void LabelMatcher::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tsdb.proto.LabelMatcher.name)
}

// string value = 3;
inline void LabelMatcher::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& LabelMatcher::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tsdb.proto.LabelMatcher.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LabelMatcher::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tsdb.proto.LabelMatcher.value)
}
inline std::string* LabelMatcher::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:tsdb.proto.LabelMatcher.value)
  return _s;
}
inline const std::string& LabelMatcher::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void LabelMatcher::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* LabelMatcher::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* LabelMatcher::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tsdb.proto.LabelMatcher.value)
  return _impl_.value_.Release();
}
inline void LabelMatcher::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tsdb.proto.LabelMatcher.value)
}

// -------------------------------------------------------------------

// TimeRange

// int64 start_time = 1;
inline void TimeRange::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_ = ::int64_t{0};
}
inline ::int64_t TimeRange::start_time() const {
  // @@protoc_insertion_point(field_get:tsdb.proto.TimeRange.start_time)
  return _internal_start_time();
}
inline void TimeRange::set_start_time(::int64_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:tsdb.proto.TimeRange.start_time)
}
inline ::int64_t TimeRange::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_time_;
}
inline void TimeRange::_internal_set_start_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_ = value;
}

// int64 end_time = 2;
inline void TimeRange::clear_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_time_ = ::int64_t{0};
}
inline ::int64_t TimeRange::end_time() const {
  // @@protoc_insertion_point(field_get:tsdb.proto.TimeRange.end_time)
  return _internal_end_time();
}
inline void TimeRange::set_end_time(::int64_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:tsdb.proto.TimeRange.end_time)
}
inline ::int64_t TimeRange::_internal_end_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.end_time_;
}
inline void TimeRange::_internal_set_end_time(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.end_time_ = value;
}

// -------------------------------------------------------------------

// QueryParams

// .tsdb.proto.TimeRange time_range = 1;
inline bool QueryParams::has_time_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_range_ != nullptr);
  return value;
}
inline void QueryParams::clear_time_range() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_range_ != nullptr) _impl_.time_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tsdb::proto::TimeRange& QueryParams::_internal_time_range() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tsdb::proto::TimeRange* p = _impl_.time_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::tsdb::proto::TimeRange&>(::tsdb::proto::_TimeRange_default_instance_);
}
inline const ::tsdb::proto::TimeRange& QueryParams::time_range() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tsdb.proto.QueryParams.time_range)
  return _internal_time_range();
}
inline void QueryParams::unsafe_arena_set_allocated_time_range(::tsdb::proto::TimeRange* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_range_);
  }
  _impl_.time_range_ = reinterpret_cast<::tsdb::proto::TimeRange*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tsdb.proto.QueryParams.time_range)
}
inline ::tsdb::proto::TimeRange* QueryParams::release_time_range() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tsdb::proto::TimeRange* released = _impl_.time_range_;
  _impl_.time_range_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tsdb::proto::TimeRange* QueryParams::unsafe_arena_release_time_range() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tsdb.proto.QueryParams.time_range)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tsdb::proto::TimeRange* temp = _impl_.time_range_;
  _impl_.time_range_ = nullptr;
  return temp;
}
inline ::tsdb::proto::TimeRange* QueryParams::_internal_mutable_time_range() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_range_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tsdb::proto::TimeRange>(GetArena());
    _impl_.time_range_ = reinterpret_cast<::tsdb::proto::TimeRange*>(p);
  }
  return _impl_.time_range_;
}
inline ::tsdb::proto::TimeRange* QueryParams::mutable_time_range() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tsdb::proto::TimeRange* _msg = _internal_mutable_time_range();
  // @@protoc_insertion_point(field_mutable:tsdb.proto.QueryParams.time_range)
  return _msg;
}
inline void QueryParams::set_allocated_time_range(::tsdb::proto::TimeRange* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.time_range_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.time_range_ = reinterpret_cast<::tsdb::proto::TimeRange*>(value);
  // @@protoc_insertion_point(field_set_allocated:tsdb.proto.QueryParams.time_range)
}

// repeated .tsdb.proto.LabelMatcher matchers = 2;
inline int QueryParams::_internal_matchers_size() const {
  return _internal_matchers().size();
}
inline int QueryParams::matchers_size() const {
  return _internal_matchers_size();
}
inline void QueryParams::clear_matchers() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.matchers_.Clear();
}
inline ::tsdb::proto::LabelMatcher* QueryParams::mutable_matchers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tsdb.proto.QueryParams.matchers)
  return _internal_mutable_matchers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tsdb::proto::LabelMatcher>* QueryParams::mutable_matchers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tsdb.proto.QueryParams.matchers)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_matchers();
}
inline const ::tsdb::proto::LabelMatcher& QueryParams::matchers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tsdb.proto.QueryParams.matchers)
  return _internal_matchers().Get(index);
}
inline ::tsdb::proto::LabelMatcher* QueryParams::add_matchers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tsdb::proto::LabelMatcher* _add = _internal_mutable_matchers()->Add();
  // @@protoc_insertion_point(field_add:tsdb.proto.QueryParams.matchers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tsdb::proto::LabelMatcher>& QueryParams::matchers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tsdb.proto.QueryParams.matchers)
  return _internal_matchers();
}
inline const ::google::protobuf::RepeatedPtrField<::tsdb::proto::LabelMatcher>&
QueryParams::_internal_matchers() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.matchers_;
}
inline ::google::protobuf::RepeatedPtrField<::tsdb::proto::LabelMatcher>*
QueryParams::_internal_mutable_matchers() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.matchers_;
}

// -------------------------------------------------------------------

// LabelValuesRequest

// string label_name = 1;
inline void LabelValuesRequest::clear_label_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_name_.ClearToEmpty();
}
inline const std::string& LabelValuesRequest::label_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tsdb.proto.LabelValuesRequest.label_name)
  return _internal_label_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LabelValuesRequest::set_label_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tsdb.proto.LabelValuesRequest.label_name)
}
inline std::string* LabelValuesRequest::mutable_label_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label_name();
  // @@protoc_insertion_point(field_mutable:tsdb.proto.LabelValuesRequest.label_name)
  return _s;
}
inline const std::string& LabelValuesRequest::_internal_label_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_name_.Get();
}
inline void LabelValuesRequest::_internal_set_label_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_name_.Set(value, GetArena());
}
inline std::string* LabelValuesRequest::_internal_mutable_label_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.label_name_.Mutable( GetArena());
}
inline std::string* LabelValuesRequest::release_label_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tsdb.proto.LabelValuesRequest.label_name)
  return _impl_.label_name_.Release();
}
inline void LabelValuesRequest::set_allocated_label_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.label_name_.IsDefault()) {
    _impl_.label_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tsdb.proto.LabelValuesRequest.label_name)
}

// .tsdb.proto.QueryParams params = 2;
inline bool LabelValuesRequest::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline void LabelValuesRequest::clear_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tsdb::proto::QueryParams& LabelValuesRequest::_internal_params() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tsdb::proto::QueryParams* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::tsdb::proto::QueryParams&>(::tsdb::proto::_QueryParams_default_instance_);
}
inline const ::tsdb::proto::QueryParams& LabelValuesRequest::params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tsdb.proto.LabelValuesRequest.params)
  return _internal_params();
}
inline void LabelValuesRequest::unsafe_arena_set_allocated_params(::tsdb::proto::QueryParams* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = reinterpret_cast<::tsdb::proto::QueryParams*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tsdb.proto.LabelValuesRequest.params)
}
inline ::tsdb::proto::QueryParams* LabelValuesRequest::release_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tsdb::proto::QueryParams* released = _impl_.params_;
  _impl_.params_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tsdb::proto::QueryParams* LabelValuesRequest::unsafe_arena_release_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tsdb.proto.LabelValuesRequest.params)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tsdb::proto::QueryParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::tsdb::proto::QueryParams* LabelValuesRequest::_internal_mutable_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.params_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tsdb::proto::QueryParams>(GetArena());
    _impl_.params_ = reinterpret_cast<::tsdb::proto::QueryParams*>(p);
  }
  return _impl_.params_;
}
inline ::tsdb::proto::QueryParams* LabelValuesRequest::mutable_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tsdb::proto::QueryParams* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:tsdb.proto.LabelValuesRequest.params)
  return _msg;
}
inline void LabelValuesRequest::set_allocated_params(::tsdb::proto::QueryParams* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.params_ = reinterpret_cast<::tsdb::proto::QueryParams*>(value);
  // @@protoc_insertion_point(field_set_allocated:tsdb.proto.LabelValuesRequest.params)
}

// -------------------------------------------------------------------

// LabelNamesResponse

// repeated string names = 1;
inline int LabelNamesResponse::_internal_names_size() const {
  return _internal_names().size();
}
inline int LabelNamesResponse::names_size() const {
  return _internal_names_size();
}
inline void LabelNamesResponse::clear_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.names_.Clear();
}
inline std::string* LabelNamesResponse::add_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:tsdb.proto.LabelNamesResponse.names)
  return _s;
}
inline const std::string& LabelNamesResponse::names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tsdb.proto.LabelNamesResponse.names)
  return _internal_names().Get(index);
}
inline std::string* LabelNamesResponse::mutable_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tsdb.proto.LabelNamesResponse.names)
  return _internal_mutable_names()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void LabelNamesResponse::set_names(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_names()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tsdb.proto.LabelNamesResponse.names)
}
template <typename Arg_, typename... Args_>
inline void LabelNamesResponse::add_names(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_names(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tsdb.proto.LabelNamesResponse.names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LabelNamesResponse::names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tsdb.proto.LabelNamesResponse.names)
  return _internal_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LabelNamesResponse::mutable_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tsdb.proto.LabelNamesResponse.names)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LabelNamesResponse::_internal_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LabelNamesResponse::_internal_mutable_names() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.names_;
}

// -------------------------------------------------------------------

// LabelValuesResponse

// repeated string values = 1;
inline int LabelValuesResponse::_internal_values_size() const {
  return _internal_values().size();
}
inline int LabelValuesResponse::values_size() const {
  return _internal_values_size();
}
inline void LabelValuesResponse::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline std::string* LabelValuesResponse::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:tsdb.proto.LabelValuesResponse.values)
  return _s;
}
inline const std::string& LabelValuesResponse::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tsdb.proto.LabelValuesResponse.values)
  return _internal_values().Get(index);
}
inline std::string* LabelValuesResponse::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tsdb.proto.LabelValuesResponse.values)
  return _internal_mutable_values()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void LabelValuesResponse::set_values(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_values()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tsdb.proto.LabelValuesResponse.values)
}
template <typename Arg_, typename... Args_>
inline void LabelValuesResponse::add_values(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_values(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tsdb.proto.LabelValuesResponse.values)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LabelValuesResponse::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tsdb.proto.LabelValuesResponse.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LabelValuesResponse::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tsdb.proto.LabelValuesResponse.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LabelValuesResponse::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LabelValuesResponse::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// SeriesResponse

// repeated .tsdb.proto.TimeSeries series = 1;
inline int SeriesResponse::_internal_series_size() const {
  return _internal_series().size();
}
inline int SeriesResponse::series_size() const {
  return _internal_series_size();
}
inline void SeriesResponse::clear_series() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.series_.Clear();
}
inline ::tsdb::proto::TimeSeries* SeriesResponse::mutable_series(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tsdb.proto.SeriesResponse.series)
  return _internal_mutable_series()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tsdb::proto::TimeSeries>* SeriesResponse::mutable_series()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tsdb.proto.SeriesResponse.series)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_series();
}
inline const ::tsdb::proto::TimeSeries& SeriesResponse::series(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tsdb.proto.SeriesResponse.series)
  return _internal_series().Get(index);
}
inline ::tsdb::proto::TimeSeries* SeriesResponse::add_series() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tsdb::proto::TimeSeries* _add = _internal_mutable_series()->Add();
  // @@protoc_insertion_point(field_add:tsdb.proto.SeriesResponse.series)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tsdb::proto::TimeSeries>& SeriesResponse::series() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tsdb.proto.SeriesResponse.series)
  return _internal_series();
}
inline const ::google::protobuf::RepeatedPtrField<::tsdb::proto::TimeSeries>&
SeriesResponse::_internal_series() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.series_;
}
inline ::google::protobuf::RepeatedPtrField<::tsdb::proto::TimeSeries>*
SeriesResponse::_internal_mutable_series() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.series_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace tsdb


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tsdb::proto::LabelMatcher_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tsdb::proto::LabelMatcher_Type>() {
  return ::tsdb::proto::LabelMatcher_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // tsdb_2eproto_2epb_2eh
