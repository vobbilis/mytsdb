// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: opentelemetry/proto/common/v1/common.proto
// Protobuf C++ Version: 5.29.3

#include "opentelemetry/proto/common/v1/common.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace opentelemetry {
namespace proto {
namespace common {
namespace v1 {

inline constexpr EntityRef::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_keys_{},
        description_keys_{},
        schema_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EntityRef::EntityRef(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EntityRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityRefDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityRefDefaultTypeInternal() {}
  union {
    EntityRef _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityRefDefaultTypeInternal _EntityRef_default_instance_;

inline constexpr AnyValue::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AnyValue::AnyValue(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AnyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnyValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnyValueDefaultTypeInternal() {}
  union {
    AnyValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnyValueDefaultTypeInternal _AnyValue_default_instance_;

inline constexpr ArrayValue::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : values_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ArrayValue::ArrayValue(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ArrayValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArrayValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArrayValueDefaultTypeInternal() {}
  union {
    ArrayValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArrayValueDefaultTypeInternal _ArrayValue_default_instance_;

inline constexpr KeyValue::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR KeyValue::KeyValue(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct KeyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyValueDefaultTypeInternal() {}
  union {
    KeyValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyValueDefaultTypeInternal _KeyValue_default_instance_;

inline constexpr KeyValueList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : values_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR KeyValueList::KeyValueList(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct KeyValueListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyValueListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyValueListDefaultTypeInternal() {}
  union {
    KeyValueList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyValueListDefaultTypeInternal _KeyValueList_default_instance_;

inline constexpr InstrumentationScope::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : attributes_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dropped_attributes_count_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InstrumentationScope::InstrumentationScope(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InstrumentationScopeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentationScopeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentationScopeDefaultTypeInternal() {}
  union {
    InstrumentationScope _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentationScopeDefaultTypeInternal _InstrumentationScope_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace proto
}  // namespace opentelemetry
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto = nullptr;
const ::uint32_t
    TableStruct_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::AnyValue, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::AnyValue, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::AnyValue, _impl_.value_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::ArrayValue, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::ArrayValue, _impl_.values_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::KeyValueList, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::KeyValueList, _impl_.values_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::KeyValue, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::KeyValue, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::KeyValue, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::KeyValue, _impl_.value_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::InstrumentationScope, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::InstrumentationScope, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::InstrumentationScope, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::InstrumentationScope, _impl_.attributes_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::InstrumentationScope, _impl_.dropped_attributes_count_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::EntityRef, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::EntityRef, _impl_.schema_url_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::EntityRef, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::EntityRef, _impl_.id_keys_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::EntityRef, _impl_.description_keys_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::opentelemetry::proto::common::v1::AnyValue)},
        {16, -1, -1, sizeof(::opentelemetry::proto::common::v1::ArrayValue)},
        {25, -1, -1, sizeof(::opentelemetry::proto::common::v1::KeyValueList)},
        {34, 44, -1, sizeof(::opentelemetry::proto::common::v1::KeyValue)},
        {46, -1, -1, sizeof(::opentelemetry::proto::common::v1::InstrumentationScope)},
        {58, -1, -1, sizeof(::opentelemetry::proto::common::v1::EntityRef)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::opentelemetry::proto::common::v1::_AnyValue_default_instance_._instance,
    &::opentelemetry::proto::common::v1::_ArrayValue_default_instance_._instance,
    &::opentelemetry::proto::common::v1::_KeyValueList_default_instance_._instance,
    &::opentelemetry::proto::common::v1::_KeyValue_default_instance_._instance,
    &::opentelemetry::proto::common::v1::_InstrumentationScope_default_instance_._instance,
    &::opentelemetry::proto::common::v1::_EntityRef_default_instance_._instance,
};
const char descriptor_table_protodef_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n*opentelemetry/proto/common/v1/common.p"
    "roto\022\035opentelemetry.proto.common.v1\"\214\002\n\010"
    "AnyValue\022\026\n\014string_value\030\001 \001(\tH\000\022\024\n\nbool"
    "_value\030\002 \001(\010H\000\022\023\n\tint_value\030\003 \001(\003H\000\022\026\n\014d"
    "ouble_value\030\004 \001(\001H\000\022@\n\013array_value\030\005 \001(\013"
    "2).opentelemetry.proto.common.v1.ArrayVa"
    "lueH\000\022C\n\014kvlist_value\030\006 \001(\0132+.openteleme"
    "try.proto.common.v1.KeyValueListH\000\022\025\n\013by"
    "tes_value\030\007 \001(\014H\000B\007\n\005value\"E\n\nArrayValue"
    "\0227\n\006values\030\001 \003(\0132\'.opentelemetry.proto.c"
    "ommon.v1.AnyValue\"G\n\014KeyValueList\0227\n\006val"
    "ues\030\001 \003(\0132\'.opentelemetry.proto.common.v"
    "1.KeyValue\"O\n\010KeyValue\022\013\n\003key\030\001 \001(\t\0226\n\005v"
    "alue\030\002 \001(\0132\'.opentelemetry.proto.common."
    "v1.AnyValue\"\224\001\n\024InstrumentationScope\022\014\n\004"
    "name\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022;\n\nattribute"
    "s\030\003 \003(\0132\'.opentelemetry.proto.common.v1."
    "KeyValue\022 \n\030dropped_attributes_count\030\004 \001"
    "(\r\"X\n\tEntityRef\022\022\n\nschema_url\030\001 \001(\t\022\014\n\004t"
    "ype\030\002 \001(\t\022\017\n\007id_keys\030\003 \003(\t\022\030\n\020descriptio"
    "n_keys\030\004 \003(\tB{\n io.opentelemetry.proto.c"
    "ommon.v1B\013CommonProtoP\001Z(go.opentelemetr"
    "y.io/proto/otlp/common/v1\252\002\035OpenTelemetr"
    "y.Proto.Common.V1b\006proto3"
};
static ::absl::once_flag descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto = {
    false,
    false,
    945,
    descriptor_table_protodef_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
    "opentelemetry/proto/common/v1/common.proto",
    &descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto::offsets,
    file_level_enum_descriptors_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
    file_level_service_descriptors_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
};
namespace opentelemetry {
namespace proto {
namespace common {
namespace v1 {
// ===================================================================

class AnyValue::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::common::v1::AnyValue, _impl_._oneof_case_);
};

void AnyValue::set_allocated_array_value(::opentelemetry::proto::common::v1::ArrayValue* array_value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (array_value) {
    ::google::protobuf::Arena* submessage_arena = array_value->GetArena();
    if (message_arena != submessage_arena) {
      array_value = ::google::protobuf::internal::GetOwnedMessage(message_arena, array_value, submessage_arena);
    }
    set_has_array_value();
    _impl_.value_.array_value_ = array_value;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.common.v1.AnyValue.array_value)
}
void AnyValue::set_allocated_kvlist_value(::opentelemetry::proto::common::v1::KeyValueList* kvlist_value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (kvlist_value) {
    ::google::protobuf::Arena* submessage_arena = kvlist_value->GetArena();
    if (message_arena != submessage_arena) {
      kvlist_value = ::google::protobuf::internal::GetOwnedMessage(message_arena, kvlist_value, submessage_arena);
    }
    set_has_kvlist_value();
    _impl_.value_.kvlist_value_ = kvlist_value;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.common.v1.AnyValue.kvlist_value)
}
AnyValue::AnyValue(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.common.v1.AnyValue)
}
inline PROTOBUF_NDEBUG_INLINE AnyValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::common::v1::AnyValue& from_msg)
      : value_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

AnyValue::AnyValue(
    ::google::protobuf::Arena* arena,
    const AnyValue& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AnyValue* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (value_case()) {
    case VALUE_NOT_SET:
      break;
      case kStringValue:
        new (&_impl_.value_.string_value_) decltype(_impl_.value_.string_value_){arena, from._impl_.value_.string_value_};
        break;
      case kBoolValue:
        _impl_.value_.bool_value_ = from._impl_.value_.bool_value_;
        break;
      case kIntValue:
        _impl_.value_.int_value_ = from._impl_.value_.int_value_;
        break;
      case kDoubleValue:
        _impl_.value_.double_value_ = from._impl_.value_.double_value_;
        break;
      case kArrayValue:
        _impl_.value_.array_value_ = ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::common::v1::ArrayValue>(arena, *from._impl_.value_.array_value_);
        break;
      case kKvlistValue:
        _impl_.value_.kvlist_value_ = ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::common::v1::KeyValueList>(arena, *from._impl_.value_.kvlist_value_);
        break;
      case kBytesValue:
        new (&_impl_.value_.bytes_value_) decltype(_impl_.value_.bytes_value_){arena, from._impl_.value_.bytes_value_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.common.v1.AnyValue)
}
inline PROTOBUF_NDEBUG_INLINE AnyValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : value_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void AnyValue::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AnyValue::~AnyValue() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.common.v1.AnyValue)
  SharedDtor(*this);
}
inline void AnyValue::SharedDtor(MessageLite& self) {
  AnyValue& this_ = static_cast<AnyValue&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_value()) {
    this_.clear_value();
  }
  this_._impl_.~Impl_();
}

void AnyValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:opentelemetry.proto.common.v1.AnyValue)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (value_case()) {
    case kStringValue: {
      _impl_.value_.string_value_.Destroy();
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kArrayValue: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.array_value_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.array_value_);
      }
      break;
    }
    case kKvlistValue: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.kvlist_value_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.kvlist_value_);
      }
      break;
    }
    case kBytesValue: {
      _impl_.value_.bytes_value_.Destroy();
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


inline void* AnyValue::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AnyValue(arena);
}
constexpr auto AnyValue::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AnyValue),
                                            alignof(AnyValue));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AnyValue::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AnyValue_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AnyValue::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AnyValue>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AnyValue::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AnyValue>(), &AnyValue::ByteSizeLong,
            &AnyValue::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AnyValue, _impl_._cached_size_),
        false,
    },
    &AnyValue::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AnyValue::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 7, 2, 59, 2> AnyValue::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::AnyValue>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string string_value = 1;
    {PROTOBUF_FIELD_OFFSET(AnyValue, _impl_.value_.string_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool bool_value = 2;
    {PROTOBUF_FIELD_OFFSET(AnyValue, _impl_.value_.bool_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBool)},
    // int64 int_value = 3;
    {PROTOBUF_FIELD_OFFSET(AnyValue, _impl_.value_.int_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // double double_value = 4;
    {PROTOBUF_FIELD_OFFSET(AnyValue, _impl_.value_.double_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // .opentelemetry.proto.common.v1.ArrayValue array_value = 5;
    {PROTOBUF_FIELD_OFFSET(AnyValue, _impl_.value_.array_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .opentelemetry.proto.common.v1.KeyValueList kvlist_value = 6;
    {PROTOBUF_FIELD_OFFSET(AnyValue, _impl_.value_.kvlist_value_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes bytes_value = 7;
    {PROTOBUF_FIELD_OFFSET(AnyValue, _impl_.value_.bytes_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBytes | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::ArrayValue>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValueList>()},
  }}, {{
    "\46\14\0\0\0\0\0\0"
    "opentelemetry.proto.common.v1.AnyValue"
    "string_value"
  }},
};

PROTOBUF_NOINLINE void AnyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.common.v1.AnyValue)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AnyValue::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AnyValue& this_ = static_cast<const AnyValue&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AnyValue::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AnyValue& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.common.v1.AnyValue)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.value_case()) {
            case kStringValue: {
              const std::string& _s = this_._internal_string_value();
              ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                  _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.common.v1.AnyValue.string_value");
              target = stream->WriteStringMaybeAliased(1, _s, target);
              break;
            }
            case kBoolValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteBoolToArray(
                  2, this_._internal_bool_value(), target);
              break;
            }
            case kIntValue: {
              target = ::google::protobuf::internal::WireFormatLite::
                  WriteInt64ToArrayWithField<3>(
                      stream, this_._internal_int_value(), target);
              break;
            }
            case kDoubleValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                  4, this_._internal_double_value(), target);
              break;
            }
            case kArrayValue: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.value_.array_value_, this_._impl_.value_.array_value_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kKvlistValue: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.value_.kvlist_value_, this_._impl_.value_.kvlist_value_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBytesValue: {
              const std::string& _s = this_._internal_bytes_value();
              target = stream->WriteBytesMaybeAliased(7, _s, target);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.common.v1.AnyValue)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AnyValue::ByteSizeLong(const MessageLite& base) {
          const AnyValue& this_ = static_cast<const AnyValue&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AnyValue::ByteSizeLong() const {
          const AnyValue& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.common.v1.AnyValue)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.value_case()) {
            // string string_value = 1;
            case kStringValue: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_string_value());
              break;
            }
            // bool bool_value = 2;
            case kBoolValue: {
              total_size += 2;
              break;
            }
            // int64 int_value = 3;
            case kIntValue: {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_int_value());
              break;
            }
            // double double_value = 4;
            case kDoubleValue: {
              total_size += 9;
              break;
            }
            // .opentelemetry.proto.common.v1.ArrayValue array_value = 5;
            case kArrayValue: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.array_value_);
              break;
            }
            // .opentelemetry.proto.common.v1.KeyValueList kvlist_value = 6;
            case kKvlistValue: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_.kvlist_value_);
              break;
            }
            // bytes bytes_value = 7;
            case kBytesValue: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_bytes_value());
              break;
            }
            case VALUE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AnyValue::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AnyValue*>(&to_msg);
  auto& from = static_cast<const AnyValue&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.common.v1.AnyValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_value();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kStringValue: {
        if (oneof_needs_init) {
          _this->_impl_.value_.string_value_.InitDefault();
        }
        _this->_impl_.value_.string_value_.Set(from._internal_string_value(), arena);
        break;
      }
      case kBoolValue: {
        _this->_impl_.value_.bool_value_ = from._impl_.value_.bool_value_;
        break;
      }
      case kIntValue: {
        _this->_impl_.value_.int_value_ = from._impl_.value_.int_value_;
        break;
      }
      case kDoubleValue: {
        _this->_impl_.value_.double_value_ = from._impl_.value_.double_value_;
        break;
      }
      case kArrayValue: {
        if (oneof_needs_init) {
          _this->_impl_.value_.array_value_ =
              ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::common::v1::ArrayValue>(arena, *from._impl_.value_.array_value_);
        } else {
          _this->_impl_.value_.array_value_->MergeFrom(from._internal_array_value());
        }
        break;
      }
      case kKvlistValue: {
        if (oneof_needs_init) {
          _this->_impl_.value_.kvlist_value_ =
              ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::common::v1::KeyValueList>(arena, *from._impl_.value_.kvlist_value_);
        } else {
          _this->_impl_.value_.kvlist_value_->MergeFrom(from._internal_kvlist_value());
        }
        break;
      }
      case kBytesValue: {
        if (oneof_needs_init) {
          _this->_impl_.value_.bytes_value_.InitDefault();
        }
        _this->_impl_.value_.bytes_value_.Set(from._internal_bytes_value(), arena);
        break;
      }
      case VALUE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AnyValue::CopyFrom(const AnyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.common.v1.AnyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AnyValue::InternalSwap(AnyValue* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AnyValue::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ArrayValue::_Internal {
 public:
};

ArrayValue::ArrayValue(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.common.v1.ArrayValue)
}
inline PROTOBUF_NDEBUG_INLINE ArrayValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::common::v1::ArrayValue& from_msg)
      : values_{visibility, arena, from.values_},
        _cached_size_{0} {}

ArrayValue::ArrayValue(
    ::google::protobuf::Arena* arena,
    const ArrayValue& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ArrayValue* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.common.v1.ArrayValue)
}
inline PROTOBUF_NDEBUG_INLINE ArrayValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : values_{visibility, arena},
        _cached_size_{0} {}

inline void ArrayValue::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ArrayValue::~ArrayValue() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.common.v1.ArrayValue)
  SharedDtor(*this);
}
inline void ArrayValue::SharedDtor(MessageLite& self) {
  ArrayValue& this_ = static_cast<ArrayValue&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ArrayValue::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ArrayValue(arena);
}
constexpr auto ArrayValue::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ArrayValue, _impl_.values_) +
          decltype(ArrayValue::_impl_.values_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ArrayValue), alignof(ArrayValue), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ArrayValue::PlacementNew_,
                                 sizeof(ArrayValue),
                                 alignof(ArrayValue));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ArrayValue::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ArrayValue_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ArrayValue::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ArrayValue>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ArrayValue::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ArrayValue>(), &ArrayValue::ByteSizeLong,
            &ArrayValue::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ArrayValue, _impl_._cached_size_),
        false,
    },
    &ArrayValue::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ArrayValue::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ArrayValue::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::ArrayValue>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .opentelemetry.proto.common.v1.AnyValue values = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ArrayValue, _impl_.values_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .opentelemetry.proto.common.v1.AnyValue values = 1;
    {PROTOBUF_FIELD_OFFSET(ArrayValue, _impl_.values_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::AnyValue>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ArrayValue::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.common.v1.ArrayValue)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ArrayValue::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ArrayValue& this_ = static_cast<const ArrayValue&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ArrayValue::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ArrayValue& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.common.v1.ArrayValue)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .opentelemetry.proto.common.v1.AnyValue values = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_values_size());
               i < n; i++) {
            const auto& repfield = this_._internal_values().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.common.v1.ArrayValue)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ArrayValue::ByteSizeLong(const MessageLite& base) {
          const ArrayValue& this_ = static_cast<const ArrayValue&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ArrayValue::ByteSizeLong() const {
          const ArrayValue& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.common.v1.ArrayValue)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.common.v1.AnyValue values = 1;
            {
              total_size += 1UL * this_._internal_values_size();
              for (const auto& msg : this_._internal_values()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ArrayValue::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ArrayValue*>(&to_msg);
  auto& from = static_cast<const ArrayValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.common.v1.ArrayValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_values()->MergeFrom(
      from._internal_values());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ArrayValue::CopyFrom(const ArrayValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.common.v1.ArrayValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ArrayValue::InternalSwap(ArrayValue* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::google::protobuf::Metadata ArrayValue::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class KeyValueList::_Internal {
 public:
};

KeyValueList::KeyValueList(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.common.v1.KeyValueList)
}
inline PROTOBUF_NDEBUG_INLINE KeyValueList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::common::v1::KeyValueList& from_msg)
      : values_{visibility, arena, from.values_},
        _cached_size_{0} {}

KeyValueList::KeyValueList(
    ::google::protobuf::Arena* arena,
    const KeyValueList& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  KeyValueList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.common.v1.KeyValueList)
}
inline PROTOBUF_NDEBUG_INLINE KeyValueList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : values_{visibility, arena},
        _cached_size_{0} {}

inline void KeyValueList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
KeyValueList::~KeyValueList() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.common.v1.KeyValueList)
  SharedDtor(*this);
}
inline void KeyValueList::SharedDtor(MessageLite& self) {
  KeyValueList& this_ = static_cast<KeyValueList&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* KeyValueList::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) KeyValueList(arena);
}
constexpr auto KeyValueList::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(KeyValueList, _impl_.values_) +
          decltype(KeyValueList::_impl_.values_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(KeyValueList), alignof(KeyValueList), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&KeyValueList::PlacementNew_,
                                 sizeof(KeyValueList),
                                 alignof(KeyValueList));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull KeyValueList::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_KeyValueList_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &KeyValueList::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<KeyValueList>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &KeyValueList::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<KeyValueList>(), &KeyValueList::ByteSizeLong,
            &KeyValueList::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(KeyValueList, _impl_._cached_size_),
        false,
    },
    &KeyValueList::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* KeyValueList::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> KeyValueList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValueList>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .opentelemetry.proto.common.v1.KeyValue values = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(KeyValueList, _impl_.values_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .opentelemetry.proto.common.v1.KeyValue values = 1;
    {PROTOBUF_FIELD_OFFSET(KeyValueList, _impl_.values_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValue>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void KeyValueList::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.common.v1.KeyValueList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* KeyValueList::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const KeyValueList& this_ = static_cast<const KeyValueList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* KeyValueList::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const KeyValueList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.common.v1.KeyValueList)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .opentelemetry.proto.common.v1.KeyValue values = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_values_size());
               i < n; i++) {
            const auto& repfield = this_._internal_values().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.common.v1.KeyValueList)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t KeyValueList::ByteSizeLong(const MessageLite& base) {
          const KeyValueList& this_ = static_cast<const KeyValueList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t KeyValueList::ByteSizeLong() const {
          const KeyValueList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.common.v1.KeyValueList)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.common.v1.KeyValue values = 1;
            {
              total_size += 1UL * this_._internal_values_size();
              for (const auto& msg : this_._internal_values()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void KeyValueList::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<KeyValueList*>(&to_msg);
  auto& from = static_cast<const KeyValueList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.common.v1.KeyValueList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_values()->MergeFrom(
      from._internal_values());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KeyValueList::CopyFrom(const KeyValueList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.common.v1.KeyValueList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void KeyValueList::InternalSwap(KeyValueList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::google::protobuf::Metadata KeyValueList::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class KeyValue::_Internal {
 public:
  using HasBits =
      decltype(std::declval<KeyValue>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(KeyValue, _impl_._has_bits_);
};

KeyValue::KeyValue(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.common.v1.KeyValue)
}
inline PROTOBUF_NDEBUG_INLINE KeyValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::common::v1::KeyValue& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        key_(arena, from.key_) {}

KeyValue::KeyValue(
    ::google::protobuf::Arena* arena,
    const KeyValue& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  KeyValue* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.value_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::common::v1::AnyValue>(
                              arena, *from._impl_.value_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.common.v1.KeyValue)
}
inline PROTOBUF_NDEBUG_INLINE KeyValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        key_(arena) {}

inline void KeyValue::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.common.v1.KeyValue)
  SharedDtor(*this);
}
inline void KeyValue::SharedDtor(MessageLite& self) {
  KeyValue& this_ = static_cast<KeyValue&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.key_.Destroy();
  delete this_._impl_.value_;
  this_._impl_.~Impl_();
}

inline void* KeyValue::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) KeyValue(arena);
}
constexpr auto KeyValue::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(KeyValue),
                                            alignof(KeyValue));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull KeyValue::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_KeyValue_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &KeyValue::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<KeyValue>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &KeyValue::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<KeyValue>(), &KeyValue::ByteSizeLong,
            &KeyValue::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(KeyValue, _impl_._cached_size_),
        false,
    },
    &KeyValue::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* KeyValue::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 50, 2> KeyValue::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(KeyValue, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValue>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .opentelemetry.proto.common.v1.AnyValue value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .opentelemetry.proto.common.v1.AnyValue value = 2;
    {PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::AnyValue>()},
  }}, {{
    "\46\3\0\0\0\0\0\0"
    "opentelemetry.proto.common.v1.KeyValue"
    "key"
  }},
};

PROTOBUF_NOINLINE void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.common.v1.KeyValue)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.value_ != nullptr);
    _impl_.value_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* KeyValue::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const KeyValue& this_ = static_cast<const KeyValue&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* KeyValue::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const KeyValue& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.common.v1.KeyValue)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string key = 1;
          if (!this_._internal_key().empty()) {
            const std::string& _s = this_._internal_key();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.common.v1.KeyValue.key");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .opentelemetry.proto.common.v1.AnyValue value = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.value_, this_._impl_.value_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.common.v1.KeyValue)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t KeyValue::ByteSizeLong(const MessageLite& base) {
          const KeyValue& this_ = static_cast<const KeyValue&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t KeyValue::ByteSizeLong() const {
          const KeyValue& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.common.v1.KeyValue)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string key = 1;
            if (!this_._internal_key().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_key());
            }
          }
           {
            // .opentelemetry.proto.common.v1.AnyValue value = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void KeyValue::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<KeyValue*>(&to_msg);
  auto& from = static_cast<const KeyValue&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.common.v1.KeyValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.value_ != nullptr);
    if (_this->_impl_.value_ == nullptr) {
      _this->_impl_.value_ =
          ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::common::v1::AnyValue>(arena, *from._impl_.value_);
    } else {
      _this->_impl_.value_->MergeFrom(*from._impl_.value_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.common.v1.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void KeyValue::InternalSwap(KeyValue* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InstrumentationScope::_Internal {
 public:
};

InstrumentationScope::InstrumentationScope(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.common.v1.InstrumentationScope)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentationScope::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::common::v1::InstrumentationScope& from_msg)
      : attributes_{visibility, arena, from.attributes_},
        name_(arena, from.name_),
        version_(arena, from.version_),
        _cached_size_{0} {}

InstrumentationScope::InstrumentationScope(
    ::google::protobuf::Arena* arena,
    const InstrumentationScope& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InstrumentationScope* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.dropped_attributes_count_ = from._impl_.dropped_attributes_count_;

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.common.v1.InstrumentationScope)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentationScope::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : attributes_{visibility, arena},
        name_(arena),
        version_(arena),
        _cached_size_{0} {}

inline void InstrumentationScope::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.dropped_attributes_count_ = {};
}
InstrumentationScope::~InstrumentationScope() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.common.v1.InstrumentationScope)
  SharedDtor(*this);
}
inline void InstrumentationScope::SharedDtor(MessageLite& self) {
  InstrumentationScope& this_ = static_cast<InstrumentationScope&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.version_.Destroy();
  this_._impl_.~Impl_();
}

inline void* InstrumentationScope::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) InstrumentationScope(arena);
}
constexpr auto InstrumentationScope::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(InstrumentationScope, _impl_.attributes_) +
          decltype(InstrumentationScope::_impl_.attributes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(InstrumentationScope), alignof(InstrumentationScope), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&InstrumentationScope::PlacementNew_,
                                 sizeof(InstrumentationScope),
                                 alignof(InstrumentationScope));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull InstrumentationScope::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_InstrumentationScope_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &InstrumentationScope::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<InstrumentationScope>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &InstrumentationScope::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<InstrumentationScope>(), &InstrumentationScope::ByteSizeLong,
            &InstrumentationScope::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(InstrumentationScope, _impl_._cached_size_),
        false,
    },
    &InstrumentationScope::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* InstrumentationScope::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 70, 2> InstrumentationScope::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::InstrumentationScope>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 dropped_attributes_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InstrumentationScope, _impl_.dropped_attributes_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentationScope, _impl_.dropped_attributes_count_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentationScope, _impl_.name_)}},
    // string version = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentationScope, _impl_.version_)}},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentationScope, _impl_.attributes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(InstrumentationScope, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string version = 2;
    {PROTOBUF_FIELD_OFFSET(InstrumentationScope, _impl_.version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
    {PROTOBUF_FIELD_OFFSET(InstrumentationScope, _impl_.attributes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 dropped_attributes_count = 4;
    {PROTOBUF_FIELD_OFFSET(InstrumentationScope, _impl_.dropped_attributes_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValue>()},
  }}, {{
    "\62\4\7\0\0\0\0\0"
    "opentelemetry.proto.common.v1.InstrumentationScope"
    "name"
    "version"
  }},
};

PROTOBUF_NOINLINE void InstrumentationScope::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.common.v1.InstrumentationScope)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.dropped_attributes_count_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* InstrumentationScope::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const InstrumentationScope& this_ = static_cast<const InstrumentationScope&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* InstrumentationScope::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const InstrumentationScope& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.common.v1.InstrumentationScope)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.common.v1.InstrumentationScope.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string version = 2;
          if (!this_._internal_version().empty()) {
            const std::string& _s = this_._internal_version();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.common.v1.InstrumentationScope.version");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_attributes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_attributes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint32 dropped_attributes_count = 4;
          if (this_._internal_dropped_attributes_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                4, this_._internal_dropped_attributes_count(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.common.v1.InstrumentationScope)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t InstrumentationScope::ByteSizeLong(const MessageLite& base) {
          const InstrumentationScope& this_ = static_cast<const InstrumentationScope&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t InstrumentationScope::ByteSizeLong() const {
          const InstrumentationScope& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.common.v1.InstrumentationScope)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 3;
            {
              total_size += 1UL * this_._internal_attributes_size();
              for (const auto& msg : this_._internal_attributes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string version = 2;
            if (!this_._internal_version().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_version());
            }
            // uint32 dropped_attributes_count = 4;
            if (this_._internal_dropped_attributes_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_dropped_attributes_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void InstrumentationScope::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InstrumentationScope*>(&to_msg);
  auto& from = static_cast<const InstrumentationScope&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.common.v1.InstrumentationScope)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_attributes()->MergeFrom(
      from._internal_attributes());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_dropped_attributes_count() != 0) {
    _this->_impl_.dropped_attributes_count_ = from._impl_.dropped_attributes_count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentationScope::CopyFrom(const InstrumentationScope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.common.v1.InstrumentationScope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InstrumentationScope::InternalSwap(InstrumentationScope* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, &other->_impl_.version_, arena);
        swap(_impl_.dropped_attributes_count_, other->_impl_.dropped_attributes_count_);
}

::google::protobuf::Metadata InstrumentationScope::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EntityRef::_Internal {
 public:
};

EntityRef::EntityRef(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.common.v1.EntityRef)
}
inline PROTOBUF_NDEBUG_INLINE EntityRef::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::common::v1::EntityRef& from_msg)
      : id_keys_{visibility, arena, from.id_keys_},
        description_keys_{visibility, arena, from.description_keys_},
        schema_url_(arena, from.schema_url_),
        type_(arena, from.type_),
        _cached_size_{0} {}

EntityRef::EntityRef(
    ::google::protobuf::Arena* arena,
    const EntityRef& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EntityRef* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.common.v1.EntityRef)
}
inline PROTOBUF_NDEBUG_INLINE EntityRef::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_keys_{visibility, arena},
        description_keys_{visibility, arena},
        schema_url_(arena),
        type_(arena),
        _cached_size_{0} {}

inline void EntityRef::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EntityRef::~EntityRef() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.common.v1.EntityRef)
  SharedDtor(*this);
}
inline void EntityRef::SharedDtor(MessageLite& self) {
  EntityRef& this_ = static_cast<EntityRef&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.schema_url_.Destroy();
  this_._impl_.type_.Destroy();
  this_._impl_.~Impl_();
}

inline void* EntityRef::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EntityRef(arena);
}
constexpr auto EntityRef::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(EntityRef, _impl_.id_keys_) +
          decltype(EntityRef::_impl_.id_keys_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(EntityRef, _impl_.description_keys_) +
          decltype(EntityRef::_impl_.description_keys_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(EntityRef), alignof(EntityRef), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&EntityRef::PlacementNew_,
                                 sizeof(EntityRef),
                                 alignof(EntityRef));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EntityRef::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EntityRef_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EntityRef::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EntityRef>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EntityRef::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EntityRef>(), &EntityRef::ByteSizeLong,
            &EntityRef::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EntityRef, _impl_._cached_size_),
        false,
    },
    &EntityRef::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EntityRef::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 85, 2> EntityRef::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::EntityRef>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string description_keys = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(EntityRef, _impl_.description_keys_)}},
    // string schema_url = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EntityRef, _impl_.schema_url_)}},
    // string type = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(EntityRef, _impl_.type_)}},
    // repeated string id_keys = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(EntityRef, _impl_.id_keys_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string schema_url = 1;
    {PROTOBUF_FIELD_OFFSET(EntityRef, _impl_.schema_url_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string type = 2;
    {PROTOBUF_FIELD_OFFSET(EntityRef, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string id_keys = 3;
    {PROTOBUF_FIELD_OFFSET(EntityRef, _impl_.id_keys_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string description_keys = 4;
    {PROTOBUF_FIELD_OFFSET(EntityRef, _impl_.description_keys_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\47\12\4\7\20\0\0\0"
    "opentelemetry.proto.common.v1.EntityRef"
    "schema_url"
    "type"
    "id_keys"
    "description_keys"
  }},
};

PROTOBUF_NOINLINE void EntityRef::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.common.v1.EntityRef)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_keys_.Clear();
  _impl_.description_keys_.Clear();
  _impl_.schema_url_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EntityRef::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EntityRef& this_ = static_cast<const EntityRef&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EntityRef::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EntityRef& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.common.v1.EntityRef)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string schema_url = 1;
          if (!this_._internal_schema_url().empty()) {
            const std::string& _s = this_._internal_schema_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.common.v1.EntityRef.schema_url");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string type = 2;
          if (!this_._internal_type().empty()) {
            const std::string& _s = this_._internal_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.common.v1.EntityRef.type");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // repeated string id_keys = 3;
          for (int i = 0, n = this_._internal_id_keys_size(); i < n; ++i) {
            const auto& s = this_._internal_id_keys().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.common.v1.EntityRef.id_keys");
            target = stream->WriteString(3, s, target);
          }

          // repeated string description_keys = 4;
          for (int i = 0, n = this_._internal_description_keys_size(); i < n; ++i) {
            const auto& s = this_._internal_description_keys().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.common.v1.EntityRef.description_keys");
            target = stream->WriteString(4, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.common.v1.EntityRef)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EntityRef::ByteSizeLong(const MessageLite& base) {
          const EntityRef& this_ = static_cast<const EntityRef&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EntityRef::ByteSizeLong() const {
          const EntityRef& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.common.v1.EntityRef)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string id_keys = 3;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_id_keys().size());
              for (int i = 0, n = this_._internal_id_keys().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_id_keys().Get(i));
              }
            }
            // repeated string description_keys = 4;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_description_keys().size());
              for (int i = 0, n = this_._internal_description_keys().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_description_keys().Get(i));
              }
            }
          }
           {
            // string schema_url = 1;
            if (!this_._internal_schema_url().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_schema_url());
            }
            // string type = 2;
            if (!this_._internal_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EntityRef::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EntityRef*>(&to_msg);
  auto& from = static_cast<const EntityRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.common.v1.EntityRef)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_id_keys()->MergeFrom(from._internal_id_keys());
  _this->_internal_mutable_description_keys()->MergeFrom(from._internal_description_keys());
  if (!from._internal_schema_url().empty()) {
    _this->_internal_set_schema_url(from._internal_schema_url());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EntityRef::CopyFrom(const EntityRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.common.v1.EntityRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EntityRef::InternalSwap(EntityRef* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.id_keys_.InternalSwap(&other->_impl_.id_keys_);
  _impl_.description_keys_.InternalSwap(&other->_impl_.description_keys_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.schema_url_, &other->_impl_.schema_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
}

::google::protobuf::Metadata EntityRef::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
}  // namespace proto
}  // namespace opentelemetry
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
