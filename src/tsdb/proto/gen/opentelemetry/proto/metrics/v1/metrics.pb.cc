// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: opentelemetry/proto/metrics/v1/metrics.proto
// Protobuf C++ Version: 5.29.3

#include "opentelemetry/proto/metrics/v1/metrics.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace opentelemetry {
namespace proto {
namespace metrics {
namespace v1 {

inline constexpr SummaryDataPoint_ValueAtQuantile::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : quantile_{0},
        value_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SummaryDataPoint_ValueAtQuantile::SummaryDataPoint_ValueAtQuantile(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SummaryDataPoint_ValueAtQuantileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryDataPoint_ValueAtQuantileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryDataPoint_ValueAtQuantileDefaultTypeInternal() {}
  union {
    SummaryDataPoint_ValueAtQuantile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryDataPoint_ValueAtQuantileDefaultTypeInternal _SummaryDataPoint_ValueAtQuantile_default_instance_;

inline constexpr ExponentialHistogramDataPoint_Buckets::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : bucket_counts_{},
        _bucket_counts_cached_byte_size_{0},
        offset_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ExponentialHistogramDataPoint_Buckets::ExponentialHistogramDataPoint_Buckets(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExponentialHistogramDataPoint_BucketsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExponentialHistogramDataPoint_BucketsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExponentialHistogramDataPoint_BucketsDefaultTypeInternal() {}
  union {
    ExponentialHistogramDataPoint_Buckets _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExponentialHistogramDataPoint_BucketsDefaultTypeInternal _ExponentialHistogramDataPoint_Buckets_default_instance_;

inline constexpr SummaryDataPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : quantile_values_{},
        attributes_{},
        start_time_unix_nano_{::uint64_t{0u}},
        time_unix_nano_{::uint64_t{0u}},
        count_{::uint64_t{0u}},
        sum_{0},
        flags_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SummaryDataPoint::SummaryDataPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SummaryDataPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryDataPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryDataPointDefaultTypeInternal() {}
  union {
    SummaryDataPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryDataPointDefaultTypeInternal _SummaryDataPoint_default_instance_;

inline constexpr Exemplar::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : filtered_attributes_{},
        span_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        trace_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_unix_nano_{::uint64_t{0u}},
        value_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Exemplar::Exemplar(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExemplarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExemplarDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExemplarDefaultTypeInternal() {}
  union {
    Exemplar _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExemplarDefaultTypeInternal _Exemplar_default_instance_;

inline constexpr Summary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_points_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Summary::Summary(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryDefaultTypeInternal() {}
  union {
    Summary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryDefaultTypeInternal _Summary_default_instance_;

inline constexpr NumberDataPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : exemplars_{},
        attributes_{},
        start_time_unix_nano_{::uint64_t{0u}},
        time_unix_nano_{::uint64_t{0u}},
        flags_{0u},
        value_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR NumberDataPoint::NumberDataPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct NumberDataPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumberDataPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumberDataPointDefaultTypeInternal() {}
  union {
    NumberDataPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumberDataPointDefaultTypeInternal _NumberDataPoint_default_instance_;

inline constexpr HistogramDataPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bucket_counts_{},
        explicit_bounds_{},
        exemplars_{},
        attributes_{},
        start_time_unix_nano_{::uint64_t{0u}},
        time_unix_nano_{::uint64_t{0u}},
        count_{::uint64_t{0u}},
        sum_{0},
        min_{0},
        max_{0},
        flags_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR HistogramDataPoint::HistogramDataPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HistogramDataPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistogramDataPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistogramDataPointDefaultTypeInternal() {}
  union {
    HistogramDataPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistogramDataPointDefaultTypeInternal _HistogramDataPoint_default_instance_;

inline constexpr ExponentialHistogramDataPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        attributes_{},
        exemplars_{},
        positive_{nullptr},
        negative_{nullptr},
        start_time_unix_nano_{::uint64_t{0u}},
        time_unix_nano_{::uint64_t{0u}},
        count_{::uint64_t{0u}},
        sum_{0},
        zero_count_{::uint64_t{0u}},
        scale_{0},
        flags_{0u},
        min_{0},
        max_{0},
        zero_threshold_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ExponentialHistogramDataPoint::ExponentialHistogramDataPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExponentialHistogramDataPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExponentialHistogramDataPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExponentialHistogramDataPointDefaultTypeInternal() {}
  union {
    ExponentialHistogramDataPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExponentialHistogramDataPointDefaultTypeInternal _ExponentialHistogramDataPoint_default_instance_;

inline constexpr Sum::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_points_{},
        aggregation_temporality_{static_cast< ::opentelemetry::proto::metrics::v1::AggregationTemporality >(0)},
        is_monotonic_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Sum::Sum(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SumDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SumDefaultTypeInternal() {}
  union {
    Sum _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SumDefaultTypeInternal _Sum_default_instance_;

inline constexpr Histogram::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_points_{},
        aggregation_temporality_{static_cast< ::opentelemetry::proto::metrics::v1::AggregationTemporality >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Histogram::Histogram(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HistogramDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistogramDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistogramDefaultTypeInternal() {}
  union {
    Histogram _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistogramDefaultTypeInternal _Histogram_default_instance_;

inline constexpr Gauge::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_points_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Gauge::Gauge(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GaugeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GaugeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GaugeDefaultTypeInternal() {}
  union {
    Gauge _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GaugeDefaultTypeInternal _Gauge_default_instance_;

inline constexpr ExponentialHistogram::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_points_{},
        aggregation_temporality_{static_cast< ::opentelemetry::proto::metrics::v1::AggregationTemporality >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ExponentialHistogram::ExponentialHistogram(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ExponentialHistogramDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExponentialHistogramDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExponentialHistogramDefaultTypeInternal() {}
  union {
    ExponentialHistogram _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExponentialHistogramDefaultTypeInternal _ExponentialHistogram_default_instance_;

inline constexpr Metric::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : metadata_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        unit_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Metric::Metric(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricDefaultTypeInternal() {}
  union {
    Metric _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricDefaultTypeInternal _Metric_default_instance_;

inline constexpr ScopeMetrics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        metrics_{},
        schema_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        scope_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ScopeMetrics::ScopeMetrics(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ScopeMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScopeMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScopeMetricsDefaultTypeInternal() {}
  union {
    ScopeMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScopeMetricsDefaultTypeInternal _ScopeMetrics_default_instance_;

inline constexpr ResourceMetrics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        scope_metrics_{},
        schema_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        resource_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ResourceMetrics::ResourceMetrics(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ResourceMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceMetricsDefaultTypeInternal() {}
  union {
    ResourceMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceMetricsDefaultTypeInternal _ResourceMetrics_default_instance_;

inline constexpr MetricsData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : resource_metrics_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MetricsData::MetricsData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MetricsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricsDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricsDataDefaultTypeInternal() {}
  union {
    MetricsData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricsDataDefaultTypeInternal _MetricsData_default_instance_;
}  // namespace v1
}  // namespace metrics
}  // namespace proto
}  // namespace opentelemetry
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto = nullptr;
const ::uint32_t
    TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::MetricsData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::MetricsData, _impl_.resource_metrics_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ResourceMetrics, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ResourceMetrics, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ResourceMetrics, _impl_.resource_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ResourceMetrics, _impl_.scope_metrics_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ResourceMetrics, _impl_.schema_url_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ScopeMetrics, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ScopeMetrics, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ScopeMetrics, _impl_.scope_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ScopeMetrics, _impl_.metrics_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ScopeMetrics, _impl_.schema_url_),
        0,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, _impl_.unit_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, _impl_.metadata_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, _impl_.data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Gauge, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Gauge, _impl_.data_points_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Sum, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Sum, _impl_.data_points_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Sum, _impl_.aggregation_temporality_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Sum, _impl_.is_monotonic_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Histogram, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Histogram, _impl_.data_points_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Histogram, _impl_.aggregation_temporality_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogram, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogram, _impl_.data_points_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogram, _impl_.aggregation_temporality_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Summary, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Summary, _impl_.data_points_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, _impl_.attributes_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, _impl_.start_time_unix_nano_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, _impl_.time_unix_nano_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, _impl_.exemplars_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, _impl_.attributes_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, _impl_.start_time_unix_nano_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, _impl_.time_unix_nano_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, _impl_.count_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, _impl_.sum_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, _impl_.bucket_counts_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, _impl_.explicit_bounds_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, _impl_.exemplars_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, _impl_.min_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::HistogramDataPoint, _impl_.max_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets, _impl_.offset_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets, _impl_.bucket_counts_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_.attributes_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_.start_time_unix_nano_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_.time_unix_nano_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_.count_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_.sum_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_.scale_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_.zero_count_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_.positive_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_.negative_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_.exemplars_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_.min_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_.max_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint, _impl_.zero_threshold_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        2,
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        ~0u,
        3,
        4,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile, _impl_.quantile_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile, _impl_.value_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, _impl_.attributes_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, _impl_.start_time_unix_nano_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, _impl_.time_unix_nano_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, _impl_.count_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, _impl_.sum_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, _impl_.quantile_values_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::SummaryDataPoint, _impl_.flags_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, _impl_.filtered_attributes_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, _impl_.time_unix_nano_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, _impl_.span_id_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, _impl_.trace_id_),
        PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, _impl_.value_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::opentelemetry::proto::metrics::v1::MetricsData)},
        {9, 20, -1, sizeof(::opentelemetry::proto::metrics::v1::ResourceMetrics)},
        {23, 34, -1, sizeof(::opentelemetry::proto::metrics::v1::ScopeMetrics)},
        {37, -1, -1, sizeof(::opentelemetry::proto::metrics::v1::Metric)},
        {55, -1, -1, sizeof(::opentelemetry::proto::metrics::v1::Gauge)},
        {64, -1, -1, sizeof(::opentelemetry::proto::metrics::v1::Sum)},
        {75, -1, -1, sizeof(::opentelemetry::proto::metrics::v1::Histogram)},
        {85, -1, -1, sizeof(::opentelemetry::proto::metrics::v1::ExponentialHistogram)},
        {95, -1, -1, sizeof(::opentelemetry::proto::metrics::v1::Summary)},
        {104, -1, -1, sizeof(::opentelemetry::proto::metrics::v1::NumberDataPoint)},
        {120, 139, -1, sizeof(::opentelemetry::proto::metrics::v1::HistogramDataPoint)},
        {150, -1, -1, sizeof(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets)},
        {160, 182, -1, sizeof(::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint)},
        {196, -1, -1, sizeof(::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile)},
        {206, -1, -1, sizeof(::opentelemetry::proto::metrics::v1::SummaryDataPoint)},
        {221, -1, -1, sizeof(::opentelemetry::proto::metrics::v1::Exemplar)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::opentelemetry::proto::metrics::v1::_MetricsData_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_ResourceMetrics_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_ScopeMetrics_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_Metric_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_Gauge_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_Sum_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_Histogram_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_ExponentialHistogram_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_Summary_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_NumberDataPoint_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_HistogramDataPoint_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_ExponentialHistogramDataPoint_Buckets_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_ExponentialHistogramDataPoint_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_SummaryDataPoint_ValueAtQuantile_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_SummaryDataPoint_default_instance_._instance,
    &::opentelemetry::proto::metrics::v1::_Exemplar_default_instance_._instance,
};
const char descriptor_table_protodef_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n,opentelemetry/proto/metrics/v1/metrics"
    ".proto\022\036opentelemetry.proto.metrics.v1\032*"
    "opentelemetry/proto/common/v1/common.pro"
    "to\032.opentelemetry/proto/resource/v1/reso"
    "urce.proto\"X\n\013MetricsData\022I\n\020resource_me"
    "trics\030\001 \003(\0132/.opentelemetry.proto.metric"
    "s.v1.ResourceMetrics\"\257\001\n\017ResourceMetrics"
    "\022;\n\010resource\030\001 \001(\0132).opentelemetry.proto"
    ".resource.v1.Resource\022C\n\rscope_metrics\030\002"
    " \003(\0132,.opentelemetry.proto.metrics.v1.Sc"
    "opeMetrics\022\022\n\nschema_url\030\003 \001(\tJ\006\010\350\007\020\351\007\"\237"
    "\001\n\014ScopeMetrics\022B\n\005scope\030\001 \001(\01323.opentel"
    "emetry.proto.common.v1.InstrumentationSc"
    "ope\0227\n\007metrics\030\002 \003(\0132&.opentelemetry.pro"
    "to.metrics.v1.Metric\022\022\n\nschema_url\030\003 \001(\t"
    "\"\315\003\n\006Metric\022\014\n\004name\030\001 \001(\t\022\023\n\013description"
    "\030\002 \001(\t\022\014\n\004unit\030\003 \001(\t\0226\n\005gauge\030\005 \001(\0132%.op"
    "entelemetry.proto.metrics.v1.GaugeH\000\0222\n\003"
    "sum\030\007 \001(\0132#.opentelemetry.proto.metrics."
    "v1.SumH\000\022>\n\thistogram\030\t \001(\0132).openteleme"
    "try.proto.metrics.v1.HistogramH\000\022U\n\025expo"
    "nential_histogram\030\n \001(\01324.opentelemetry."
    "proto.metrics.v1.ExponentialHistogramH\000\022"
    ":\n\007summary\030\013 \001(\0132\'.opentelemetry.proto.m"
    "etrics.v1.SummaryH\000\0229\n\010metadata\030\014 \003(\0132\'."
    "opentelemetry.proto.common.v1.KeyValueB\006"
    "\n\004dataJ\004\010\004\020\005J\004\010\006\020\007J\004\010\010\020\t\"M\n\005Gauge\022D\n\013dat"
    "a_points\030\001 \003(\0132/.opentelemetry.proto.met"
    "rics.v1.NumberDataPoint\"\272\001\n\003Sum\022D\n\013data_"
    "points\030\001 \003(\0132/.opentelemetry.proto.metri"
    "cs.v1.NumberDataPoint\022W\n\027aggregation_tem"
    "porality\030\002 \001(\01626.opentelemetry.proto.met"
    "rics.v1.AggregationTemporality\022\024\n\014is_mon"
    "otonic\030\003 \001(\010\"\255\001\n\tHistogram\022G\n\013data_point"
    "s\030\001 \003(\01322.opentelemetry.proto.metrics.v1"
    ".HistogramDataPoint\022W\n\027aggregation_tempo"
    "rality\030\002 \001(\01626.opentelemetry.proto.metri"
    "cs.v1.AggregationTemporality\"\303\001\n\024Exponen"
    "tialHistogram\022R\n\013data_points\030\001 \003(\0132=.ope"
    "ntelemetry.proto.metrics.v1.ExponentialH"
    "istogramDataPoint\022W\n\027aggregation_tempora"
    "lity\030\002 \001(\01626.opentelemetry.proto.metrics"
    ".v1.AggregationTemporality\"P\n\007Summary\022E\n"
    "\013data_points\030\001 \003(\01320.opentelemetry.proto"
    ".metrics.v1.SummaryDataPoint\"\206\002\n\017NumberD"
    "ataPoint\022;\n\nattributes\030\007 \003(\0132\'.opentelem"
    "etry.proto.common.v1.KeyValue\022\034\n\024start_t"
    "ime_unix_nano\030\002 \001(\006\022\026\n\016time_unix_nano\030\003 "
    "\001(\006\022\023\n\tas_double\030\004 \001(\001H\000\022\020\n\006as_int\030\006 \001(\020"
    "H\000\022;\n\texemplars\030\005 \003(\0132(.opentelemetry.pr"
    "oto.metrics.v1.Exemplar\022\r\n\005flags\030\010 \001(\rB\007"
    "\n\005valueJ\004\010\001\020\002\"\346\002\n\022HistogramDataPoint\022;\n\n"
    "attributes\030\t \003(\0132\'.opentelemetry.proto.c"
    "ommon.v1.KeyValue\022\034\n\024start_time_unix_nan"
    "o\030\002 \001(\006\022\026\n\016time_unix_nano\030\003 \001(\006\022\r\n\005count"
    "\030\004 \001(\006\022\020\n\003sum\030\005 \001(\001H\000\210\001\001\022\025\n\rbucket_count"
    "s\030\006 \003(\006\022\027\n\017explicit_bounds\030\007 \003(\001\022;\n\texem"
    "plars\030\010 \003(\0132(.opentelemetry.proto.metric"
    "s.v1.Exemplar\022\r\n\005flags\030\n \001(\r\022\020\n\003min\030\013 \001("
    "\001H\001\210\001\001\022\020\n\003max\030\014 \001(\001H\002\210\001\001B\006\n\004_sumB\006\n\004_min"
    "B\006\n\004_maxJ\004\010\001\020\002\"\332\004\n\035ExponentialHistogramD"
    "ataPoint\022;\n\nattributes\030\001 \003(\0132\'.opentelem"
    "etry.proto.common.v1.KeyValue\022\034\n\024start_t"
    "ime_unix_nano\030\002 \001(\006\022\026\n\016time_unix_nano\030\003 "
    "\001(\006\022\r\n\005count\030\004 \001(\006\022\020\n\003sum\030\005 \001(\001H\000\210\001\001\022\r\n\005"
    "scale\030\006 \001(\021\022\022\n\nzero_count\030\007 \001(\006\022W\n\010posit"
    "ive\030\010 \001(\0132E.opentelemetry.proto.metrics."
    "v1.ExponentialHistogramDataPoint.Buckets"
    "\022W\n\010negative\030\t \001(\0132E.opentelemetry.proto"
    ".metrics.v1.ExponentialHistogramDataPoin"
    "t.Buckets\022\r\n\005flags\030\n \001(\r\022;\n\texemplars\030\013 "
    "\003(\0132(.opentelemetry.proto.metrics.v1.Exe"
    "mplar\022\020\n\003min\030\014 \001(\001H\001\210\001\001\022\020\n\003max\030\r \001(\001H\002\210\001"
    "\001\022\026\n\016zero_threshold\030\016 \001(\001\0320\n\007Buckets\022\016\n\006"
    "offset\030\001 \001(\021\022\025\n\rbucket_counts\030\002 \003(\004B\006\n\004_"
    "sumB\006\n\004_minB\006\n\004_max\"\305\002\n\020SummaryDataPoint"
    "\022;\n\nattributes\030\007 \003(\0132\'.opentelemetry.pro"
    "to.common.v1.KeyValue\022\034\n\024start_time_unix"
    "_nano\030\002 \001(\006\022\026\n\016time_unix_nano\030\003 \001(\006\022\r\n\005c"
    "ount\030\004 \001(\006\022\013\n\003sum\030\005 \001(\001\022Y\n\017quantile_valu"
    "es\030\006 \003(\0132@.opentelemetry.proto.metrics.v"
    "1.SummaryDataPoint.ValueAtQuantile\022\r\n\005fl"
    "ags\030\010 \001(\r\0322\n\017ValueAtQuantile\022\020\n\010quantile"
    "\030\001 \001(\001\022\r\n\005value\030\002 \001(\001J\004\010\001\020\002\"\301\001\n\010Exemplar"
    "\022D\n\023filtered_attributes\030\007 \003(\0132\'.opentele"
    "metry.proto.common.v1.KeyValue\022\026\n\016time_u"
    "nix_nano\030\002 \001(\006\022\023\n\tas_double\030\003 \001(\001H\000\022\020\n\006a"
    "s_int\030\006 \001(\020H\000\022\017\n\007span_id\030\004 \001(\014\022\020\n\010trace_"
    "id\030\005 \001(\014B\007\n\005valueJ\004\010\001\020\002*\214\001\n\026AggregationT"
    "emporality\022\'\n#AGGREGATION_TEMPORALITY_UN"
    "SPECIFIED\020\000\022!\n\035AGGREGATION_TEMPORALITY_D"
    "ELTA\020\001\022&\n\"AGGREGATION_TEMPORALITY_CUMULA"
    "TIVE\020\002*^\n\016DataPointFlags\022\037\n\033DATA_POINT_F"
    "LAGS_DO_NOT_USE\020\000\022+\n\'DATA_POINT_FLAGS_NO"
    "_RECORDED_VALUE_MASK\020\001B\177\n!io.opentelemet"
    "ry.proto.metrics.v1B\014MetricsProtoP\001Z)go."
    "opentelemetry.io/proto/otlp/metrics/v1\252\002"
    "\036OpenTelemetry.Proto.Metrics.V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_deps[2] =
    {
        &::descriptor_table_opentelemetry_2fproto_2fcommon_2fv1_2fcommon_2eproto,
        &::descriptor_table_opentelemetry_2fproto_2fresource_2fv1_2fresource_2eproto,
};
static ::absl::once_flag descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto = {
    false,
    false,
    3919,
    descriptor_table_protodef_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    "opentelemetry/proto/metrics/v1/metrics.proto",
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_once,
    descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto_deps,
    2,
    16,
    schemas,
    file_default_instances,
    TableStruct_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto::offsets,
    file_level_enum_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    file_level_service_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
};
namespace opentelemetry {
namespace proto {
namespace metrics {
namespace v1 {
const ::google::protobuf::EnumDescriptor* AggregationTemporality_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t AggregationTemporality_internal_data_[] = {
    196608u, 0u, };
bool AggregationTemporality_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* DataPointFlags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto);
  return file_level_enum_descriptors_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t DataPointFlags_internal_data_[] = {
    131072u, 0u, };
bool DataPointFlags_IsValid(int value) {
  return 0 <= value && value <= 1;
}
// ===================================================================

class MetricsData::_Internal {
 public:
};

MetricsData::MetricsData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.MetricsData)
}
inline PROTOBUF_NDEBUG_INLINE MetricsData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::MetricsData& from_msg)
      : resource_metrics_{visibility, arena, from.resource_metrics_},
        _cached_size_{0} {}

MetricsData::MetricsData(
    ::google::protobuf::Arena* arena,
    const MetricsData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MetricsData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.MetricsData)
}
inline PROTOBUF_NDEBUG_INLINE MetricsData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : resource_metrics_{visibility, arena},
        _cached_size_{0} {}

inline void MetricsData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MetricsData::~MetricsData() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.MetricsData)
  SharedDtor(*this);
}
inline void MetricsData::SharedDtor(MessageLite& self) {
  MetricsData& this_ = static_cast<MetricsData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* MetricsData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MetricsData(arena);
}
constexpr auto MetricsData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MetricsData, _impl_.resource_metrics_) +
          decltype(MetricsData::_impl_.resource_metrics_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(MetricsData), alignof(MetricsData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MetricsData::PlacementNew_,
                                 sizeof(MetricsData),
                                 alignof(MetricsData));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MetricsData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MetricsData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MetricsData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MetricsData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MetricsData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MetricsData>(), &MetricsData::ByteSizeLong,
            &MetricsData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MetricsData, _impl_._cached_size_),
        false,
    },
    &MetricsData::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MetricsData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> MetricsData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::MetricsData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MetricsData, _impl_.resource_metrics_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
    {PROTOBUF_FIELD_OFFSET(MetricsData, _impl_.resource_metrics_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::ResourceMetrics>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MetricsData::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.MetricsData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_metrics_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MetricsData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MetricsData& this_ = static_cast<const MetricsData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MetricsData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MetricsData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.MetricsData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_resource_metrics_size());
               i < n; i++) {
            const auto& repfield = this_._internal_resource_metrics().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.MetricsData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MetricsData::ByteSizeLong(const MessageLite& base) {
          const MetricsData& this_ = static_cast<const MetricsData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MetricsData::ByteSizeLong() const {
          const MetricsData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.MetricsData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.metrics.v1.ResourceMetrics resource_metrics = 1;
            {
              total_size += 1UL * this_._internal_resource_metrics_size();
              for (const auto& msg : this_._internal_resource_metrics()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MetricsData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MetricsData*>(&to_msg);
  auto& from = static_cast<const MetricsData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.MetricsData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_resource_metrics()->MergeFrom(
      from._internal_resource_metrics());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MetricsData::CopyFrom(const MetricsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.MetricsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MetricsData::InternalSwap(MetricsData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.resource_metrics_.InternalSwap(&other->_impl_.resource_metrics_);
}

::google::protobuf::Metadata MetricsData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ResourceMetrics::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ResourceMetrics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ResourceMetrics, _impl_._has_bits_);
};

void ResourceMetrics::clear_resource() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.resource_ != nullptr) _impl_.resource_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ResourceMetrics::ResourceMetrics(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.ResourceMetrics)
}
inline PROTOBUF_NDEBUG_INLINE ResourceMetrics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::ResourceMetrics& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        scope_metrics_{visibility, arena, from.scope_metrics_},
        schema_url_(arena, from.schema_url_) {}

ResourceMetrics::ResourceMetrics(
    ::google::protobuf::Arena* arena,
    const ResourceMetrics& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ResourceMetrics* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.resource_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::resource::v1::Resource>(
                              arena, *from._impl_.resource_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.ResourceMetrics)
}
inline PROTOBUF_NDEBUG_INLINE ResourceMetrics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        scope_metrics_{visibility, arena},
        schema_url_(arena) {}

inline void ResourceMetrics::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.resource_ = {};
}
ResourceMetrics::~ResourceMetrics() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.ResourceMetrics)
  SharedDtor(*this);
}
inline void ResourceMetrics::SharedDtor(MessageLite& self) {
  ResourceMetrics& this_ = static_cast<ResourceMetrics&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.schema_url_.Destroy();
  delete this_._impl_.resource_;
  this_._impl_.~Impl_();
}

inline void* ResourceMetrics::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ResourceMetrics(arena);
}
constexpr auto ResourceMetrics::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ResourceMetrics, _impl_.scope_metrics_) +
          decltype(ResourceMetrics::_impl_.scope_metrics_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ResourceMetrics), alignof(ResourceMetrics), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ResourceMetrics::PlacementNew_,
                                 sizeof(ResourceMetrics),
                                 alignof(ResourceMetrics));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ResourceMetrics::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ResourceMetrics_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ResourceMetrics::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ResourceMetrics>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ResourceMetrics::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ResourceMetrics>(), &ResourceMetrics::ByteSizeLong,
            &ResourceMetrics::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ResourceMetrics, _impl_._cached_size_),
        false,
    },
    &ResourceMetrics::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ResourceMetrics::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 65, 2> ResourceMetrics::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ResourceMetrics, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::ResourceMetrics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .opentelemetry.proto.resource.v1.Resource resource = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ResourceMetrics, _impl_.resource_)}},
    // repeated .opentelemetry.proto.metrics.v1.ScopeMetrics scope_metrics = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(ResourceMetrics, _impl_.scope_metrics_)}},
    // string schema_url = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ResourceMetrics, _impl_.schema_url_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .opentelemetry.proto.resource.v1.Resource resource = 1;
    {PROTOBUF_FIELD_OFFSET(ResourceMetrics, _impl_.resource_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .opentelemetry.proto.metrics.v1.ScopeMetrics scope_metrics = 2;
    {PROTOBUF_FIELD_OFFSET(ResourceMetrics, _impl_.scope_metrics_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string schema_url = 3;
    {PROTOBUF_FIELD_OFFSET(ResourceMetrics, _impl_.schema_url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::resource::v1::Resource>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::ScopeMetrics>()},
  }}, {{
    "\56\0\0\12\0\0\0\0"
    "opentelemetry.proto.metrics.v1.ResourceMetrics"
    "schema_url"
  }},
};

PROTOBUF_NOINLINE void ResourceMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scope_metrics_.Clear();
  _impl_.schema_url_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.resource_ != nullptr);
    _impl_.resource_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ResourceMetrics::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ResourceMetrics& this_ = static_cast<const ResourceMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ResourceMetrics::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ResourceMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .opentelemetry.proto.resource.v1.Resource resource = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.resource_, this_._impl_.resource_->GetCachedSize(), target,
                stream);
          }

          // repeated .opentelemetry.proto.metrics.v1.ScopeMetrics scope_metrics = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_scope_metrics_size());
               i < n; i++) {
            const auto& repfield = this_._internal_scope_metrics().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string schema_url = 3;
          if (!this_._internal_schema_url().empty()) {
            const std::string& _s = this_._internal_schema_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.metrics.v1.ResourceMetrics.schema_url");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.ResourceMetrics)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ResourceMetrics::ByteSizeLong(const MessageLite& base) {
          const ResourceMetrics& this_ = static_cast<const ResourceMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ResourceMetrics::ByteSizeLong() const {
          const ResourceMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.metrics.v1.ScopeMetrics scope_metrics = 2;
            {
              total_size += 1UL * this_._internal_scope_metrics_size();
              for (const auto& msg : this_._internal_scope_metrics()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string schema_url = 3;
            if (!this_._internal_schema_url().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_schema_url());
            }
          }
           {
            // .opentelemetry.proto.resource.v1.Resource resource = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.resource_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ResourceMetrics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ResourceMetrics*>(&to_msg);
  auto& from = static_cast<const ResourceMetrics&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_scope_metrics()->MergeFrom(
      from._internal_scope_metrics());
  if (!from._internal_schema_url().empty()) {
    _this->_internal_set_schema_url(from._internal_schema_url());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.resource_ != nullptr);
    if (_this->_impl_.resource_ == nullptr) {
      _this->_impl_.resource_ =
          ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::resource::v1::Resource>(arena, *from._impl_.resource_);
    } else {
      _this->_impl_.resource_->MergeFrom(*from._impl_.resource_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceMetrics::CopyFrom(const ResourceMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.ResourceMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ResourceMetrics::InternalSwap(ResourceMetrics* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.scope_metrics_.InternalSwap(&other->_impl_.scope_metrics_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.schema_url_, &other->_impl_.schema_url_, arena);
  swap(_impl_.resource_, other->_impl_.resource_);
}

::google::protobuf::Metadata ResourceMetrics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ScopeMetrics::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ScopeMetrics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ScopeMetrics, _impl_._has_bits_);
};

void ScopeMetrics::clear_scope() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.scope_ != nullptr) _impl_.scope_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ScopeMetrics::ScopeMetrics(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.ScopeMetrics)
}
inline PROTOBUF_NDEBUG_INLINE ScopeMetrics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::ScopeMetrics& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        metrics_{visibility, arena, from.metrics_},
        schema_url_(arena, from.schema_url_) {}

ScopeMetrics::ScopeMetrics(
    ::google::protobuf::Arena* arena,
    const ScopeMetrics& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ScopeMetrics* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.scope_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::common::v1::InstrumentationScope>(
                              arena, *from._impl_.scope_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.ScopeMetrics)
}
inline PROTOBUF_NDEBUG_INLINE ScopeMetrics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        metrics_{visibility, arena},
        schema_url_(arena) {}

inline void ScopeMetrics::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.scope_ = {};
}
ScopeMetrics::~ScopeMetrics() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.ScopeMetrics)
  SharedDtor(*this);
}
inline void ScopeMetrics::SharedDtor(MessageLite& self) {
  ScopeMetrics& this_ = static_cast<ScopeMetrics&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.schema_url_.Destroy();
  delete this_._impl_.scope_;
  this_._impl_.~Impl_();
}

inline void* ScopeMetrics::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ScopeMetrics(arena);
}
constexpr auto ScopeMetrics::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ScopeMetrics, _impl_.metrics_) +
          decltype(ScopeMetrics::_impl_.metrics_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(ScopeMetrics), alignof(ScopeMetrics), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ScopeMetrics::PlacementNew_,
                                 sizeof(ScopeMetrics),
                                 alignof(ScopeMetrics));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ScopeMetrics::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ScopeMetrics_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ScopeMetrics::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ScopeMetrics>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ScopeMetrics::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ScopeMetrics>(), &ScopeMetrics::ByteSizeLong,
            &ScopeMetrics::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ScopeMetrics, _impl_._cached_size_),
        false,
    },
    &ScopeMetrics::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ScopeMetrics::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 62, 2> ScopeMetrics::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ScopeMetrics, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::ScopeMetrics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ScopeMetrics, _impl_.scope_)}},
    // repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(ScopeMetrics, _impl_.metrics_)}},
    // string schema_url = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ScopeMetrics, _impl_.schema_url_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
    {PROTOBUF_FIELD_OFFSET(ScopeMetrics, _impl_.scope_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
    {PROTOBUF_FIELD_OFFSET(ScopeMetrics, _impl_.metrics_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string schema_url = 3;
    {PROTOBUF_FIELD_OFFSET(ScopeMetrics, _impl_.schema_url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::InstrumentationScope>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::Metric>()},
  }}, {{
    "\53\0\0\12\0\0\0\0"
    "opentelemetry.proto.metrics.v1.ScopeMetrics"
    "schema_url"
  }},
};

PROTOBUF_NOINLINE void ScopeMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.ScopeMetrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metrics_.Clear();
  _impl_.schema_url_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.scope_ != nullptr);
    _impl_.scope_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ScopeMetrics::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ScopeMetrics& this_ = static_cast<const ScopeMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ScopeMetrics::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ScopeMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.ScopeMetrics)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.scope_, this_._impl_.scope_->GetCachedSize(), target,
                stream);
          }

          // repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_metrics_size());
               i < n; i++) {
            const auto& repfield = this_._internal_metrics().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string schema_url = 3;
          if (!this_._internal_schema_url().empty()) {
            const std::string& _s = this_._internal_schema_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.metrics.v1.ScopeMetrics.schema_url");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.ScopeMetrics)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ScopeMetrics::ByteSizeLong(const MessageLite& base) {
          const ScopeMetrics& this_ = static_cast<const ScopeMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ScopeMetrics::ByteSizeLong() const {
          const ScopeMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.ScopeMetrics)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.metrics.v1.Metric metrics = 2;
            {
              total_size += 1UL * this_._internal_metrics_size();
              for (const auto& msg : this_._internal_metrics()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string schema_url = 3;
            if (!this_._internal_schema_url().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_schema_url());
            }
          }
           {
            // .opentelemetry.proto.common.v1.InstrumentationScope scope = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.scope_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ScopeMetrics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ScopeMetrics*>(&to_msg);
  auto& from = static_cast<const ScopeMetrics&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.ScopeMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_metrics()->MergeFrom(
      from._internal_metrics());
  if (!from._internal_schema_url().empty()) {
    _this->_internal_set_schema_url(from._internal_schema_url());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.scope_ != nullptr);
    if (_this->_impl_.scope_ == nullptr) {
      _this->_impl_.scope_ =
          ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::common::v1::InstrumentationScope>(arena, *from._impl_.scope_);
    } else {
      _this->_impl_.scope_->MergeFrom(*from._impl_.scope_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ScopeMetrics::CopyFrom(const ScopeMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.ScopeMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ScopeMetrics::InternalSwap(ScopeMetrics* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.schema_url_, &other->_impl_.schema_url_, arena);
  swap(_impl_.scope_, other->_impl_.scope_);
}

::google::protobuf::Metadata ScopeMetrics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Metric::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Metric, _impl_._oneof_case_);
};

void Metric::set_allocated_gauge(::opentelemetry::proto::metrics::v1::Gauge* gauge) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (gauge) {
    ::google::protobuf::Arena* submessage_arena = gauge->GetArena();
    if (message_arena != submessage_arena) {
      gauge = ::google::protobuf::internal::GetOwnedMessage(message_arena, gauge, submessage_arena);
    }
    set_has_gauge();
    _impl_.data_.gauge_ = gauge;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.gauge)
}
void Metric::set_allocated_sum(::opentelemetry::proto::metrics::v1::Sum* sum) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (sum) {
    ::google::protobuf::Arena* submessage_arena = sum->GetArena();
    if (message_arena != submessage_arena) {
      sum = ::google::protobuf::internal::GetOwnedMessage(message_arena, sum, submessage_arena);
    }
    set_has_sum();
    _impl_.data_.sum_ = sum;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.sum)
}
void Metric::set_allocated_histogram(::opentelemetry::proto::metrics::v1::Histogram* histogram) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (histogram) {
    ::google::protobuf::Arena* submessage_arena = histogram->GetArena();
    if (message_arena != submessage_arena) {
      histogram = ::google::protobuf::internal::GetOwnedMessage(message_arena, histogram, submessage_arena);
    }
    set_has_histogram();
    _impl_.data_.histogram_ = histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.histogram)
}
void Metric::set_allocated_exponential_histogram(::opentelemetry::proto::metrics::v1::ExponentialHistogram* exponential_histogram) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (exponential_histogram) {
    ::google::protobuf::Arena* submessage_arena = exponential_histogram->GetArena();
    if (message_arena != submessage_arena) {
      exponential_histogram = ::google::protobuf::internal::GetOwnedMessage(message_arena, exponential_histogram, submessage_arena);
    }
    set_has_exponential_histogram();
    _impl_.data_.exponential_histogram_ = exponential_histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.exponential_histogram)
}
void Metric::set_allocated_summary(::opentelemetry::proto::metrics::v1::Summary* summary) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_data();
  if (summary) {
    ::google::protobuf::Arena* submessage_arena = summary->GetArena();
    if (message_arena != submessage_arena) {
      summary = ::google::protobuf::internal::GetOwnedMessage(message_arena, summary, submessage_arena);
    }
    set_has_summary();
    _impl_.data_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_set_allocated:opentelemetry.proto.metrics.v1.Metric.summary)
}
void Metric::clear_metadata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.metadata_.Clear();
}
Metric::Metric(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.Metric)
}
inline PROTOBUF_NDEBUG_INLINE Metric::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::Metric& from_msg)
      : metadata_{visibility, arena, from.metadata_},
        name_(arena, from.name_),
        description_(arena, from.description_),
        unit_(arena, from.unit_),
        data_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Metric::Metric(
    ::google::protobuf::Arena* arena,
    const Metric& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Metric* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (data_case()) {
    case DATA_NOT_SET:
      break;
      case kGauge:
        _impl_.data_.gauge_ = ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::metrics::v1::Gauge>(arena, *from._impl_.data_.gauge_);
        break;
      case kSum:
        _impl_.data_.sum_ = ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::metrics::v1::Sum>(arena, *from._impl_.data_.sum_);
        break;
      case kHistogram:
        _impl_.data_.histogram_ = ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::metrics::v1::Histogram>(arena, *from._impl_.data_.histogram_);
        break;
      case kExponentialHistogram:
        _impl_.data_.exponential_histogram_ = ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::metrics::v1::ExponentialHistogram>(arena, *from._impl_.data_.exponential_histogram_);
        break;
      case kSummary:
        _impl_.data_.summary_ = ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::metrics::v1::Summary>(arena, *from._impl_.data_.summary_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.Metric)
}
inline PROTOBUF_NDEBUG_INLINE Metric::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : metadata_{visibility, arena},
        name_(arena),
        description_(arena),
        unit_(arena),
        data_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Metric::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Metric::~Metric() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.Metric)
  SharedDtor(*this);
}
inline void Metric::SharedDtor(MessageLite& self) {
  Metric& this_ = static_cast<Metric&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.description_.Destroy();
  this_._impl_.unit_.Destroy();
  if (this_.has_data()) {
    this_.clear_data();
  }
  this_._impl_.~Impl_();
}

void Metric::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:opentelemetry.proto.metrics.v1.Metric)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (data_case()) {
    case kGauge: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.gauge_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.gauge_);
      }
      break;
    }
    case kSum: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.sum_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.sum_);
      }
      break;
    }
    case kHistogram: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.histogram_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.histogram_);
      }
      break;
    }
    case kExponentialHistogram: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.exponential_histogram_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.exponential_histogram_);
      }
      break;
    }
    case kSummary: {
      if (GetArena() == nullptr) {
        delete _impl_.data_.summary_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.data_.summary_);
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


inline void* Metric::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Metric(arena);
}
constexpr auto Metric::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Metric, _impl_.metadata_) +
          decltype(Metric::_impl_.metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Metric), alignof(Metric), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Metric::PlacementNew_,
                                 sizeof(Metric),
                                 alignof(Metric));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Metric::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Metric_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Metric::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Metric>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Metric::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Metric>(), &Metric::ByteSizeLong,
            &Metric::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Metric, _impl_._cached_size_),
        false,
    },
    &Metric::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Metric::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 9, 6, 73, 2> Metric::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963368,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::Metric>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .opentelemetry.proto.common.v1.KeyValue metadata = 12;
    {::_pbi::TcParser::FastMtR1,
     {98, 63, 5, PROTOBUF_FIELD_OFFSET(Metric, _impl_.metadata_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Metric, _impl_.name_)}},
    // string description = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Metric, _impl_.description_)}},
    // string unit = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Metric, _impl_.unit_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 2;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string unit = 3;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.unit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .opentelemetry.proto.metrics.v1.Gauge gauge = 5;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.data_.gauge_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .opentelemetry.proto.metrics.v1.Sum sum = 7;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.data_.sum_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .opentelemetry.proto.metrics.v1.Histogram histogram = 9;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.data_.histogram_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .opentelemetry.proto.metrics.v1.ExponentialHistogram exponential_histogram = 10;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.data_.exponential_histogram_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .opentelemetry.proto.metrics.v1.Summary summary = 11;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.data_.summary_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .opentelemetry.proto.common.v1.KeyValue metadata = 12;
    {PROTOBUF_FIELD_OFFSET(Metric, _impl_.metadata_), 0, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::Gauge>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::Sum>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::Histogram>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::ExponentialHistogram>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::Summary>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValue>()},
  }}, {{
    "\45\4\13\4\0\0\0\0\0\0\0\0\0\0\0\0"
    "opentelemetry.proto.metrics.v1.Metric"
    "name"
    "description"
    "unit"
  }},
};

PROTOBUF_NOINLINE void Metric::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.Metric)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.unit_.ClearToEmpty();
  clear_data();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Metric::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Metric& this_ = static_cast<const Metric&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Metric::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Metric& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.Metric)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.metrics.v1.Metric.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string description = 2;
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.metrics.v1.Metric.description");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string unit = 3;
          if (!this_._internal_unit().empty()) {
            const std::string& _s = this_._internal_unit();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "opentelemetry.proto.metrics.v1.Metric.unit");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          switch (this_.data_case()) {
            case kGauge: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.data_.gauge_, this_._impl_.data_.gauge_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSum: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  7, *this_._impl_.data_.sum_, this_._impl_.data_.sum_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHistogram: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  9, *this_._impl_.data_.histogram_, this_._impl_.data_.histogram_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kExponentialHistogram: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  10, *this_._impl_.data_.exponential_histogram_, this_._impl_.data_.exponential_histogram_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSummary: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  11, *this_._impl_.data_.summary_, this_._impl_.data_.summary_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          // repeated .opentelemetry.proto.common.v1.KeyValue metadata = 12;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_metadata_size());
               i < n; i++) {
            const auto& repfield = this_._internal_metadata().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    12, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.Metric)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Metric::ByteSizeLong(const MessageLite& base) {
          const Metric& this_ = static_cast<const Metric&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Metric::ByteSizeLong() const {
          const Metric& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.Metric)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.common.v1.KeyValue metadata = 12;
            {
              total_size += 1UL * this_._internal_metadata_size();
              for (const auto& msg : this_._internal_metadata()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string description = 2;
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
            // string unit = 3;
            if (!this_._internal_unit().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_unit());
            }
          }
          switch (this_.data_case()) {
            // .opentelemetry.proto.metrics.v1.Gauge gauge = 5;
            case kGauge: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.gauge_);
              break;
            }
            // .opentelemetry.proto.metrics.v1.Sum sum = 7;
            case kSum: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.sum_);
              break;
            }
            // .opentelemetry.proto.metrics.v1.Histogram histogram = 9;
            case kHistogram: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.histogram_);
              break;
            }
            // .opentelemetry.proto.metrics.v1.ExponentialHistogram exponential_histogram = 10;
            case kExponentialHistogram: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.exponential_histogram_);
              break;
            }
            // .opentelemetry.proto.metrics.v1.Summary summary = 11;
            case kSummary: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.data_.summary_);
              break;
            }
            case DATA_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Metric::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Metric*>(&to_msg);
  auto& from = static_cast<const Metric&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.Metric)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_metadata()->MergeFrom(
      from._internal_metadata());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_unit().empty()) {
    _this->_internal_set_unit(from._internal_unit());
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_data();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kGauge: {
        if (oneof_needs_init) {
          _this->_impl_.data_.gauge_ =
              ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::metrics::v1::Gauge>(arena, *from._impl_.data_.gauge_);
        } else {
          _this->_impl_.data_.gauge_->MergeFrom(from._internal_gauge());
        }
        break;
      }
      case kSum: {
        if (oneof_needs_init) {
          _this->_impl_.data_.sum_ =
              ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::metrics::v1::Sum>(arena, *from._impl_.data_.sum_);
        } else {
          _this->_impl_.data_.sum_->MergeFrom(from._internal_sum());
        }
        break;
      }
      case kHistogram: {
        if (oneof_needs_init) {
          _this->_impl_.data_.histogram_ =
              ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::metrics::v1::Histogram>(arena, *from._impl_.data_.histogram_);
        } else {
          _this->_impl_.data_.histogram_->MergeFrom(from._internal_histogram());
        }
        break;
      }
      case kExponentialHistogram: {
        if (oneof_needs_init) {
          _this->_impl_.data_.exponential_histogram_ =
              ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::metrics::v1::ExponentialHistogram>(arena, *from._impl_.data_.exponential_histogram_);
        } else {
          _this->_impl_.data_.exponential_histogram_->MergeFrom(from._internal_exponential_histogram());
        }
        break;
      }
      case kSummary: {
        if (oneof_needs_init) {
          _this->_impl_.data_.summary_ =
              ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::metrics::v1::Summary>(arena, *from._impl_.data_.summary_);
        } else {
          _this->_impl_.data_.summary_->MergeFrom(from._internal_summary());
        }
        break;
      }
      case DATA_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Metric::CopyFrom(const Metric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.Metric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Metric::InternalSwap(Metric* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unit_, &other->_impl_.unit_, arena);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Metric::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Gauge::_Internal {
 public:
};

Gauge::Gauge(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.Gauge)
}
inline PROTOBUF_NDEBUG_INLINE Gauge::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::Gauge& from_msg)
      : data_points_{visibility, arena, from.data_points_},
        _cached_size_{0} {}

Gauge::Gauge(
    ::google::protobuf::Arena* arena,
    const Gauge& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Gauge* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.Gauge)
}
inline PROTOBUF_NDEBUG_INLINE Gauge::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_points_{visibility, arena},
        _cached_size_{0} {}

inline void Gauge::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Gauge::~Gauge() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.Gauge)
  SharedDtor(*this);
}
inline void Gauge::SharedDtor(MessageLite& self) {
  Gauge& this_ = static_cast<Gauge&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Gauge::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Gauge(arena);
}
constexpr auto Gauge::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Gauge, _impl_.data_points_) +
          decltype(Gauge::_impl_.data_points_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Gauge), alignof(Gauge), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Gauge::PlacementNew_,
                                 sizeof(Gauge),
                                 alignof(Gauge));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Gauge::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Gauge_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Gauge::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Gauge>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Gauge::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Gauge>(), &Gauge::ByteSizeLong,
            &Gauge::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Gauge, _impl_._cached_size_),
        false,
    },
    &Gauge::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Gauge::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Gauge::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::Gauge>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Gauge, _impl_.data_points_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
    {PROTOBUF_FIELD_OFFSET(Gauge, _impl_.data_points_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::NumberDataPoint>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Gauge::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.Gauge)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_points_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Gauge::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Gauge& this_ = static_cast<const Gauge&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Gauge::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Gauge& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.Gauge)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_points_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data_points().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.Gauge)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Gauge::ByteSizeLong(const MessageLite& base) {
          const Gauge& this_ = static_cast<const Gauge&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Gauge::ByteSizeLong() const {
          const Gauge& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.Gauge)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
            {
              total_size += 1UL * this_._internal_data_points_size();
              for (const auto& msg : this_._internal_data_points()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Gauge::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Gauge*>(&to_msg);
  auto& from = static_cast<const Gauge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.Gauge)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_points()->MergeFrom(
      from._internal_data_points());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Gauge::CopyFrom(const Gauge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.Gauge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Gauge::InternalSwap(Gauge* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_points_.InternalSwap(&other->_impl_.data_points_);
}

::google::protobuf::Metadata Gauge::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Sum::_Internal {
 public:
};

Sum::Sum(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.Sum)
}
inline PROTOBUF_NDEBUG_INLINE Sum::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::Sum& from_msg)
      : data_points_{visibility, arena, from.data_points_},
        _cached_size_{0} {}

Sum::Sum(
    ::google::protobuf::Arena* arena,
    const Sum& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Sum* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, aggregation_temporality_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, aggregation_temporality_),
           offsetof(Impl_, is_monotonic_) -
               offsetof(Impl_, aggregation_temporality_) +
               sizeof(Impl_::is_monotonic_));

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.Sum)
}
inline PROTOBUF_NDEBUG_INLINE Sum::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_points_{visibility, arena},
        _cached_size_{0} {}

inline void Sum::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, aggregation_temporality_),
           0,
           offsetof(Impl_, is_monotonic_) -
               offsetof(Impl_, aggregation_temporality_) +
               sizeof(Impl_::is_monotonic_));
}
Sum::~Sum() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.Sum)
  SharedDtor(*this);
}
inline void Sum::SharedDtor(MessageLite& self) {
  Sum& this_ = static_cast<Sum&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Sum::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Sum(arena);
}
constexpr auto Sum::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Sum, _impl_.data_points_) +
          decltype(Sum::_impl_.data_points_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Sum), alignof(Sum), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Sum::PlacementNew_,
                                 sizeof(Sum),
                                 alignof(Sum));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Sum::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Sum_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Sum::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Sum>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Sum::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Sum>(), &Sum::ByteSizeLong,
            &Sum::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Sum, _impl_._cached_size_),
        false,
    },
    &Sum::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Sum::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Sum::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::Sum>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Sum, _impl_.data_points_)}},
    // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Sum, _impl_.aggregation_temporality_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Sum, _impl_.aggregation_temporality_)}},
    // bool is_monotonic = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Sum, _impl_.is_monotonic_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Sum, _impl_.is_monotonic_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
    {PROTOBUF_FIELD_OFFSET(Sum, _impl_.data_points_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
    {PROTOBUF_FIELD_OFFSET(Sum, _impl_.aggregation_temporality_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool is_monotonic = 3;
    {PROTOBUF_FIELD_OFFSET(Sum, _impl_.is_monotonic_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::NumberDataPoint>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Sum::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.Sum)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_points_.Clear();
  ::memset(&_impl_.aggregation_temporality_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_monotonic_) -
      reinterpret_cast<char*>(&_impl_.aggregation_temporality_)) + sizeof(_impl_.is_monotonic_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Sum::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Sum& this_ = static_cast<const Sum&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Sum::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Sum& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.Sum)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_points_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data_points().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
          if (this_._internal_aggregation_temporality() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_aggregation_temporality(), target);
          }

          // bool is_monotonic = 3;
          if (this_._internal_is_monotonic() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_is_monotonic(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.Sum)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Sum::ByteSizeLong(const MessageLite& base) {
          const Sum& this_ = static_cast<const Sum&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Sum::ByteSizeLong() const {
          const Sum& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.Sum)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.metrics.v1.NumberDataPoint data_points = 1;
            {
              total_size += 1UL * this_._internal_data_points_size();
              for (const auto& msg : this_._internal_data_points()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
            if (this_._internal_aggregation_temporality() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_aggregation_temporality());
            }
            // bool is_monotonic = 3;
            if (this_._internal_is_monotonic() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Sum::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Sum*>(&to_msg);
  auto& from = static_cast<const Sum&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.Sum)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_points()->MergeFrom(
      from._internal_data_points());
  if (from._internal_aggregation_temporality() != 0) {
    _this->_impl_.aggregation_temporality_ = from._impl_.aggregation_temporality_;
  }
  if (from._internal_is_monotonic() != 0) {
    _this->_impl_.is_monotonic_ = from._impl_.is_monotonic_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Sum::CopyFrom(const Sum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.Sum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Sum::InternalSwap(Sum* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_points_.InternalSwap(&other->_impl_.data_points_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sum, _impl_.is_monotonic_)
      + sizeof(Sum::_impl_.is_monotonic_)
      - PROTOBUF_FIELD_OFFSET(Sum, _impl_.aggregation_temporality_)>(
          reinterpret_cast<char*>(&_impl_.aggregation_temporality_),
          reinterpret_cast<char*>(&other->_impl_.aggregation_temporality_));
}

::google::protobuf::Metadata Sum::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Histogram::_Internal {
 public:
};

Histogram::Histogram(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.Histogram)
}
inline PROTOBUF_NDEBUG_INLINE Histogram::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::Histogram& from_msg)
      : data_points_{visibility, arena, from.data_points_},
        _cached_size_{0} {}

Histogram::Histogram(
    ::google::protobuf::Arena* arena,
    const Histogram& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Histogram* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.aggregation_temporality_ = from._impl_.aggregation_temporality_;

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.Histogram)
}
inline PROTOBUF_NDEBUG_INLINE Histogram::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_points_{visibility, arena},
        _cached_size_{0} {}

inline void Histogram::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.aggregation_temporality_ = {};
}
Histogram::~Histogram() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.Histogram)
  SharedDtor(*this);
}
inline void Histogram::SharedDtor(MessageLite& self) {
  Histogram& this_ = static_cast<Histogram&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Histogram::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Histogram(arena);
}
constexpr auto Histogram::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Histogram, _impl_.data_points_) +
          decltype(Histogram::_impl_.data_points_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Histogram), alignof(Histogram), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Histogram::PlacementNew_,
                                 sizeof(Histogram),
                                 alignof(Histogram));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Histogram::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Histogram_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Histogram::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Histogram>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Histogram::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Histogram>(), &Histogram::ByteSizeLong,
            &Histogram::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Histogram, _impl_._cached_size_),
        false,
    },
    &Histogram::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Histogram::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Histogram::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::Histogram>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Histogram, _impl_.aggregation_temporality_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Histogram, _impl_.aggregation_temporality_)}},
    // repeated .opentelemetry.proto.metrics.v1.HistogramDataPoint data_points = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Histogram, _impl_.data_points_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .opentelemetry.proto.metrics.v1.HistogramDataPoint data_points = 1;
    {PROTOBUF_FIELD_OFFSET(Histogram, _impl_.data_points_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
    {PROTOBUF_FIELD_OFFSET(Histogram, _impl_.aggregation_temporality_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::HistogramDataPoint>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.Histogram)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_points_.Clear();
  _impl_.aggregation_temporality_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Histogram::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Histogram& this_ = static_cast<const Histogram&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Histogram::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Histogram& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.Histogram)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .opentelemetry.proto.metrics.v1.HistogramDataPoint data_points = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_points_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data_points().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
          if (this_._internal_aggregation_temporality() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_aggregation_temporality(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.Histogram)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Histogram::ByteSizeLong(const MessageLite& base) {
          const Histogram& this_ = static_cast<const Histogram&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Histogram::ByteSizeLong() const {
          const Histogram& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.Histogram)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.metrics.v1.HistogramDataPoint data_points = 1;
            {
              total_size += 1UL * this_._internal_data_points_size();
              for (const auto& msg : this_._internal_data_points()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
            if (this_._internal_aggregation_temporality() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_aggregation_temporality());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Histogram::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Histogram*>(&to_msg);
  auto& from = static_cast<const Histogram&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.Histogram)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_points()->MergeFrom(
      from._internal_data_points());
  if (from._internal_aggregation_temporality() != 0) {
    _this->_impl_.aggregation_temporality_ = from._impl_.aggregation_temporality_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Histogram::CopyFrom(const Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Histogram::InternalSwap(Histogram* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_points_.InternalSwap(&other->_impl_.data_points_);
  swap(_impl_.aggregation_temporality_, other->_impl_.aggregation_temporality_);
}

::google::protobuf::Metadata Histogram::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ExponentialHistogram::_Internal {
 public:
};

ExponentialHistogram::ExponentialHistogram(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.ExponentialHistogram)
}
inline PROTOBUF_NDEBUG_INLINE ExponentialHistogram::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::ExponentialHistogram& from_msg)
      : data_points_{visibility, arena, from.data_points_},
        _cached_size_{0} {}

ExponentialHistogram::ExponentialHistogram(
    ::google::protobuf::Arena* arena,
    const ExponentialHistogram& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ExponentialHistogram* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.aggregation_temporality_ = from._impl_.aggregation_temporality_;

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.ExponentialHistogram)
}
inline PROTOBUF_NDEBUG_INLINE ExponentialHistogram::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_points_{visibility, arena},
        _cached_size_{0} {}

inline void ExponentialHistogram::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.aggregation_temporality_ = {};
}
ExponentialHistogram::~ExponentialHistogram() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.ExponentialHistogram)
  SharedDtor(*this);
}
inline void ExponentialHistogram::SharedDtor(MessageLite& self) {
  ExponentialHistogram& this_ = static_cast<ExponentialHistogram&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ExponentialHistogram::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ExponentialHistogram(arena);
}
constexpr auto ExponentialHistogram::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ExponentialHistogram, _impl_.data_points_) +
          decltype(ExponentialHistogram::_impl_.data_points_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ExponentialHistogram), alignof(ExponentialHistogram), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ExponentialHistogram::PlacementNew_,
                                 sizeof(ExponentialHistogram),
                                 alignof(ExponentialHistogram));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ExponentialHistogram::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ExponentialHistogram_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ExponentialHistogram::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ExponentialHistogram>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ExponentialHistogram::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ExponentialHistogram>(), &ExponentialHistogram::ByteSizeLong,
            &ExponentialHistogram::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ExponentialHistogram, _impl_._cached_size_),
        false,
    },
    &ExponentialHistogram::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ExponentialHistogram::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> ExponentialHistogram::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::ExponentialHistogram>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExponentialHistogram, _impl_.aggregation_temporality_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogram, _impl_.aggregation_temporality_)}},
    // repeated .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint data_points = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogram, _impl_.data_points_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint data_points = 1;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogram, _impl_.data_points_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogram, _impl_.aggregation_temporality_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ExponentialHistogram::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.ExponentialHistogram)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_points_.Clear();
  _impl_.aggregation_temporality_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ExponentialHistogram::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ExponentialHistogram& this_ = static_cast<const ExponentialHistogram&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ExponentialHistogram::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ExponentialHistogram& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.ExponentialHistogram)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint data_points = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_points_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data_points().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
          if (this_._internal_aggregation_temporality() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_aggregation_temporality(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.ExponentialHistogram)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ExponentialHistogram::ByteSizeLong(const MessageLite& base) {
          const ExponentialHistogram& this_ = static_cast<const ExponentialHistogram&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ExponentialHistogram::ByteSizeLong() const {
          const ExponentialHistogram& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.ExponentialHistogram)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint data_points = 1;
            {
              total_size += 1UL * this_._internal_data_points_size();
              for (const auto& msg : this_._internal_data_points()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .opentelemetry.proto.metrics.v1.AggregationTemporality aggregation_temporality = 2;
            if (this_._internal_aggregation_temporality() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_aggregation_temporality());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ExponentialHistogram::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ExponentialHistogram*>(&to_msg);
  auto& from = static_cast<const ExponentialHistogram&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogram)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_points()->MergeFrom(
      from._internal_data_points());
  if (from._internal_aggregation_temporality() != 0) {
    _this->_impl_.aggregation_temporality_ = from._impl_.aggregation_temporality_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExponentialHistogram::CopyFrom(const ExponentialHistogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ExponentialHistogram::InternalSwap(ExponentialHistogram* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_points_.InternalSwap(&other->_impl_.data_points_);
  swap(_impl_.aggregation_temporality_, other->_impl_.aggregation_temporality_);
}

::google::protobuf::Metadata ExponentialHistogram::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Summary::_Internal {
 public:
};

Summary::Summary(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.Summary)
}
inline PROTOBUF_NDEBUG_INLINE Summary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::Summary& from_msg)
      : data_points_{visibility, arena, from.data_points_},
        _cached_size_{0} {}

Summary::Summary(
    ::google::protobuf::Arena* arena,
    const Summary& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Summary* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.Summary)
}
inline PROTOBUF_NDEBUG_INLINE Summary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_points_{visibility, arena},
        _cached_size_{0} {}

inline void Summary::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Summary::~Summary() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.Summary)
  SharedDtor(*this);
}
inline void Summary::SharedDtor(MessageLite& self) {
  Summary& this_ = static_cast<Summary&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Summary::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Summary(arena);
}
constexpr auto Summary::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Summary, _impl_.data_points_) +
          decltype(Summary::_impl_.data_points_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Summary), alignof(Summary), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Summary::PlacementNew_,
                                 sizeof(Summary),
                                 alignof(Summary));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Summary::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Summary_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Summary::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Summary>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Summary::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Summary>(), &Summary::ByteSizeLong,
            &Summary::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Summary, _impl_._cached_size_),
        false,
    },
    &Summary::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Summary::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Summary::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::Summary>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint data_points = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Summary, _impl_.data_points_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint data_points = 1;
    {PROTOBUF_FIELD_OFFSET(Summary, _impl_.data_points_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::SummaryDataPoint>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.Summary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_points_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Summary::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Summary& this_ = static_cast<const Summary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Summary::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Summary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.Summary)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint data_points = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_points_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data_points().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.Summary)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Summary::ByteSizeLong(const MessageLite& base) {
          const Summary& this_ = static_cast<const Summary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Summary::ByteSizeLong() const {
          const Summary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.Summary)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint data_points = 1;
            {
              total_size += 1UL * this_._internal_data_points_size();
              for (const auto& msg : this_._internal_data_points()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Summary::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Summary*>(&to_msg);
  auto& from = static_cast<const Summary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.Summary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data_points()->MergeFrom(
      from._internal_data_points());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Summary::CopyFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Summary::InternalSwap(Summary* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_points_.InternalSwap(&other->_impl_.data_points_);
}

::google::protobuf::Metadata Summary::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class NumberDataPoint::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::NumberDataPoint, _impl_._oneof_case_);
};

void NumberDataPoint::clear_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributes_.Clear();
}
NumberDataPoint::NumberDataPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.NumberDataPoint)
}
inline PROTOBUF_NDEBUG_INLINE NumberDataPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::NumberDataPoint& from_msg)
      : exemplars_{visibility, arena, from.exemplars_},
        attributes_{visibility, arena, from.attributes_},
        value_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

NumberDataPoint::NumberDataPoint(
    ::google::protobuf::Arena* arena,
    const NumberDataPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  NumberDataPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_unix_nano_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_time_unix_nano_),
           offsetof(Impl_, flags_) -
               offsetof(Impl_, start_time_unix_nano_) +
               sizeof(Impl_::flags_));
  switch (value_case()) {
    case VALUE_NOT_SET:
      break;
      case kAsDouble:
        _impl_.value_.as_double_ = from._impl_.value_.as_double_;
        break;
      case kAsInt:
        _impl_.value_.as_int_ = from._impl_.value_.as_int_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.NumberDataPoint)
}
inline PROTOBUF_NDEBUG_INLINE NumberDataPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : exemplars_{visibility, arena},
        attributes_{visibility, arena},
        value_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void NumberDataPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_unix_nano_),
           0,
           offsetof(Impl_, flags_) -
               offsetof(Impl_, start_time_unix_nano_) +
               sizeof(Impl_::flags_));
}
NumberDataPoint::~NumberDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.NumberDataPoint)
  SharedDtor(*this);
}
inline void NumberDataPoint::SharedDtor(MessageLite& self) {
  NumberDataPoint& this_ = static_cast<NumberDataPoint&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_value()) {
    this_.clear_value();
  }
  this_._impl_.~Impl_();
}

void NumberDataPoint::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:opentelemetry.proto.metrics.v1.NumberDataPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (value_case()) {
    case kAsDouble: {
      // No need to clear
      break;
    }
    case kAsInt: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


inline void* NumberDataPoint::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) NumberDataPoint(arena);
}
constexpr auto NumberDataPoint::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.attributes_) +
          decltype(NumberDataPoint::_impl_.attributes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.exemplars_) +
          decltype(NumberDataPoint::_impl_.exemplars_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(NumberDataPoint), alignof(NumberDataPoint), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&NumberDataPoint::PlacementNew_,
                                 sizeof(NumberDataPoint),
                                 alignof(NumberDataPoint));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull NumberDataPoint::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_NumberDataPoint_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &NumberDataPoint::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<NumberDataPoint>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &NumberDataPoint::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<NumberDataPoint>(), &NumberDataPoint::ByteSizeLong,
            &NumberDataPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_._cached_size_),
        false,
    },
    &NumberDataPoint::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* NumberDataPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2> NumberDataPoint::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967041,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::NumberDataPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 flags = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NumberDataPoint, _impl_.flags_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.flags_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // fixed64 start_time_unix_nano = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.start_time_unix_nano_)}},
    // fixed64 time_unix_nano = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.time_unix_nano_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.exemplars_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 1, PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.attributes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // fixed64 start_time_unix_nano = 2;
    {PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.start_time_unix_nano_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // fixed64 time_unix_nano = 3;
    {PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.time_unix_nano_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // double as_double = 4;
    {PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.value_.as_double_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;
    {PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.exemplars_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // sfixed64 as_int = 6;
    {PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.value_.as_int_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kSFixed64)},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
    {PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.attributes_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 flags = 8;
    {PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.flags_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::Exemplar>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValue>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void NumberDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.NumberDataPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exemplars_.Clear();
  _impl_.attributes_.Clear();
  ::memset(&_impl_.start_time_unix_nano_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.start_time_unix_nano_)) + sizeof(_impl_.flags_));
  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* NumberDataPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const NumberDataPoint& this_ = static_cast<const NumberDataPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* NumberDataPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const NumberDataPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.NumberDataPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // fixed64 start_time_unix_nano = 2;
          if (this_._internal_start_time_unix_nano() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                2, this_._internal_start_time_unix_nano(), target);
          }

          // fixed64 time_unix_nano = 3;
          if (this_._internal_time_unix_nano() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                3, this_._internal_time_unix_nano(), target);
          }

          // double as_double = 4;
          if (this_.value_case() == kAsDouble) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_as_double(), target);
          }

          // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_exemplars_size());
               i < n; i++) {
            const auto& repfield = this_._internal_exemplars().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    5, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // sfixed64 as_int = 6;
          if (this_.value_case() == kAsInt) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(
                6, this_._internal_as_int(), target);
          }

          // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_attributes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_attributes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    7, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint32 flags = 8;
          if (this_._internal_flags() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                8, this_._internal_flags(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.NumberDataPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t NumberDataPoint::ByteSizeLong(const MessageLite& base) {
          const NumberDataPoint& this_ = static_cast<const NumberDataPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t NumberDataPoint::ByteSizeLong() const {
          const NumberDataPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.NumberDataPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 5;
            {
              total_size += 1UL * this_._internal_exemplars_size();
              for (const auto& msg : this_._internal_exemplars()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
            {
              total_size += 1UL * this_._internal_attributes_size();
              for (const auto& msg : this_._internal_attributes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // fixed64 start_time_unix_nano = 2;
            if (this_._internal_start_time_unix_nano() != 0) {
              total_size += 9;
            }
            // fixed64 time_unix_nano = 3;
            if (this_._internal_time_unix_nano() != 0) {
              total_size += 9;
            }
            // uint32 flags = 8;
            if (this_._internal_flags() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_flags());
            }
          }
          switch (this_.value_case()) {
            // double as_double = 4;
            case kAsDouble: {
              total_size += 9;
              break;
            }
            // sfixed64 as_int = 6;
            case kAsInt: {
              total_size += 9;
              break;
            }
            case VALUE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void NumberDataPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<NumberDataPoint*>(&to_msg);
  auto& from = static_cast<const NumberDataPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.NumberDataPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_exemplars()->MergeFrom(
      from._internal_exemplars());
  _this->_internal_mutable_attributes()->MergeFrom(
      from._internal_attributes());
  if (from._internal_start_time_unix_nano() != 0) {
    _this->_impl_.start_time_unix_nano_ = from._impl_.start_time_unix_nano_;
  }
  if (from._internal_time_unix_nano() != 0) {
    _this->_impl_.time_unix_nano_ = from._impl_.time_unix_nano_;
  }
  if (from._internal_flags() != 0) {
    _this->_impl_.flags_ = from._impl_.flags_;
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_value();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kAsDouble: {
        _this->_impl_.value_.as_double_ = from._impl_.value_.as_double_;
        break;
      }
      case kAsInt: {
        _this->_impl_.value_.as_int_ = from._impl_.value_.as_int_;
        break;
      }
      case VALUE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NumberDataPoint::CopyFrom(const NumberDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.NumberDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void NumberDataPoint::InternalSwap(NumberDataPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exemplars_.InternalSwap(&other->_impl_.exemplars_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.flags_)
      + sizeof(NumberDataPoint::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(NumberDataPoint, _impl_.start_time_unix_nano_)>(
          reinterpret_cast<char*>(&_impl_.start_time_unix_nano_),
          reinterpret_cast<char*>(&other->_impl_.start_time_unix_nano_));
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata NumberDataPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HistogramDataPoint::_Internal {
 public:
  using HasBits =
      decltype(std::declval<HistogramDataPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_._has_bits_);
};

void HistogramDataPoint::clear_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributes_.Clear();
}
HistogramDataPoint::HistogramDataPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.HistogramDataPoint)
}
inline PROTOBUF_NDEBUG_INLINE HistogramDataPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::HistogramDataPoint& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        bucket_counts_{visibility, arena, from.bucket_counts_},
        explicit_bounds_{visibility, arena, from.explicit_bounds_},
        exemplars_{visibility, arena, from.exemplars_},
        attributes_{visibility, arena, from.attributes_} {}

HistogramDataPoint::HistogramDataPoint(
    ::google::protobuf::Arena* arena,
    const HistogramDataPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HistogramDataPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_unix_nano_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_time_unix_nano_),
           offsetof(Impl_, flags_) -
               offsetof(Impl_, start_time_unix_nano_) +
               sizeof(Impl_::flags_));

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.HistogramDataPoint)
}
inline PROTOBUF_NDEBUG_INLINE HistogramDataPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        bucket_counts_{visibility, arena},
        explicit_bounds_{visibility, arena},
        exemplars_{visibility, arena},
        attributes_{visibility, arena} {}

inline void HistogramDataPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_unix_nano_),
           0,
           offsetof(Impl_, flags_) -
               offsetof(Impl_, start_time_unix_nano_) +
               sizeof(Impl_::flags_));
}
HistogramDataPoint::~HistogramDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.HistogramDataPoint)
  SharedDtor(*this);
}
inline void HistogramDataPoint::SharedDtor(MessageLite& self) {
  HistogramDataPoint& this_ = static_cast<HistogramDataPoint&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* HistogramDataPoint::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HistogramDataPoint(arena);
}
constexpr auto HistogramDataPoint::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.attributes_) +
          decltype(HistogramDataPoint::_impl_.attributes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.bucket_counts_) +
          decltype(HistogramDataPoint::_impl_.bucket_counts_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.explicit_bounds_) +
          decltype(HistogramDataPoint::_impl_.explicit_bounds_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.exemplars_) +
          decltype(HistogramDataPoint::_impl_.exemplars_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(HistogramDataPoint), alignof(HistogramDataPoint), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&HistogramDataPoint::PlacementNew_,
                                 sizeof(HistogramDataPoint),
                                 alignof(HistogramDataPoint));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HistogramDataPoint::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HistogramDataPoint_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HistogramDataPoint::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HistogramDataPoint>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HistogramDataPoint::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HistogramDataPoint>(), &HistogramDataPoint::ByteSizeLong,
            &HistogramDataPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_._cached_size_),
        false,
    },
    &HistogramDataPoint::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HistogramDataPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 2, 0, 2> HistogramDataPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963201,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::HistogramDataPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // fixed64 start_time_unix_nano = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.start_time_unix_nano_)}},
    // fixed64 time_unix_nano = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.time_unix_nano_)}},
    // fixed64 count = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.count_)}},
    // optional double sum = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 0, 0, PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.sum_)}},
    // repeated fixed64 bucket_counts = 6;
    {::_pbi::TcParser::FastF64P1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.bucket_counts_)}},
    // repeated double explicit_bounds = 7;
    {::_pbi::TcParser::FastF64P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.explicit_bounds_)}},
    // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.exemplars_)}},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 1, PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.attributes_)}},
    // uint32 flags = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HistogramDataPoint, _impl_.flags_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.flags_)}},
    // optional double min = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 1, 0, PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.min_)}},
    // optional double max = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 2, 0, PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.max_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // fixed64 start_time_unix_nano = 2;
    {PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.start_time_unix_nano_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // fixed64 time_unix_nano = 3;
    {PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.time_unix_nano_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // fixed64 count = 4;
    {PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // optional double sum = 5;
    {PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.sum_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // repeated fixed64 bucket_counts = 6;
    {PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.bucket_counts_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFixed64)},
    // repeated double explicit_bounds = 7;
    {PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.explicit_bounds_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 8;
    {PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.exemplars_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
    {PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.attributes_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 flags = 10;
    {PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.flags_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // optional double min = 11;
    {PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.min_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double max = 12;
    {PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.max_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::Exemplar>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValue>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void HistogramDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.HistogramDataPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_counts_.Clear();
  _impl_.explicit_bounds_.Clear();
  _impl_.exemplars_.Clear();
  _impl_.attributes_.Clear();
  ::memset(&_impl_.start_time_unix_nano_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.start_time_unix_nano_)) + sizeof(_impl_.count_));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.sum_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_) -
        reinterpret_cast<char*>(&_impl_.sum_)) + sizeof(_impl_.max_));
  }
  _impl_.flags_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HistogramDataPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HistogramDataPoint& this_ = static_cast<const HistogramDataPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HistogramDataPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HistogramDataPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.HistogramDataPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // fixed64 start_time_unix_nano = 2;
          if (this_._internal_start_time_unix_nano() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                2, this_._internal_start_time_unix_nano(), target);
          }

          // fixed64 time_unix_nano = 3;
          if (this_._internal_time_unix_nano() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                3, this_._internal_time_unix_nano(), target);
          }

          // fixed64 count = 4;
          if (this_._internal_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                4, this_._internal_count(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional double sum = 5;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_sum(), target);
          }

          // repeated fixed64 bucket_counts = 6;
          if (this_._internal_bucket_counts_size() > 0) {
            target = stream->WriteFixedPacked(6, this_._internal_bucket_counts(), target);
          }

          // repeated double explicit_bounds = 7;
          if (this_._internal_explicit_bounds_size() > 0) {
            target = stream->WriteFixedPacked(7, this_._internal_explicit_bounds(), target);
          }

          // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 8;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_exemplars_size());
               i < n; i++) {
            const auto& repfield = this_._internal_exemplars().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    8, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_attributes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_attributes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    9, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint32 flags = 10;
          if (this_._internal_flags() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                10, this_._internal_flags(), target);
          }

          // optional double min = 11;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                11, this_._internal_min(), target);
          }

          // optional double max = 12;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                12, this_._internal_max(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.HistogramDataPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HistogramDataPoint::ByteSizeLong(const MessageLite& base) {
          const HistogramDataPoint& this_ = static_cast<const HistogramDataPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HistogramDataPoint::ByteSizeLong() const {
          const HistogramDataPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.HistogramDataPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated fixed64 bucket_counts = 6;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_bucket_counts_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated double explicit_bounds = 7;
            {
              std::size_t data_size = std::size_t{8} *
                  ::_pbi::FromIntSize(this_._internal_explicit_bounds_size());
              std::size_t tag_size = data_size == 0
                  ? 0
                  : 1 + ::_pbi::WireFormatLite::Int32Size(
                                      static_cast<int32_t>(data_size));
              total_size += tag_size + data_size;
            }
            // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 8;
            {
              total_size += 1UL * this_._internal_exemplars_size();
              for (const auto& msg : this_._internal_exemplars()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 9;
            {
              total_size += 1UL * this_._internal_attributes_size();
              for (const auto& msg : this_._internal_attributes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // fixed64 start_time_unix_nano = 2;
            if (this_._internal_start_time_unix_nano() != 0) {
              total_size += 9;
            }
            // fixed64 time_unix_nano = 3;
            if (this_._internal_time_unix_nano() != 0) {
              total_size += 9;
            }
            // fixed64 count = 4;
            if (this_._internal_count() != 0) {
              total_size += 9;
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // optional double sum = 5;
            if (cached_has_bits & 0x00000001u) {
              total_size += 9;
            }
            // optional double min = 11;
            if (cached_has_bits & 0x00000002u) {
              total_size += 9;
            }
            // optional double max = 12;
            if (cached_has_bits & 0x00000004u) {
              total_size += 9;
            }
          }
           {
            // uint32 flags = 10;
            if (this_._internal_flags() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_flags());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HistogramDataPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HistogramDataPoint*>(&to_msg);
  auto& from = static_cast<const HistogramDataPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.HistogramDataPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bucket_counts()->MergeFrom(from._internal_bucket_counts());
  _this->_internal_mutable_explicit_bounds()->MergeFrom(from._internal_explicit_bounds());
  _this->_internal_mutable_exemplars()->MergeFrom(
      from._internal_exemplars());
  _this->_internal_mutable_attributes()->MergeFrom(
      from._internal_attributes());
  if (from._internal_start_time_unix_nano() != 0) {
    _this->_impl_.start_time_unix_nano_ = from._impl_.start_time_unix_nano_;
  }
  if (from._internal_time_unix_nano() != 0) {
    _this->_impl_.time_unix_nano_ = from._impl_.time_unix_nano_;
  }
  if (from._internal_count() != 0) {
    _this->_impl_.count_ = from._impl_.count_;
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sum_ = from._impl_.sum_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.min_ = from._impl_.min_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_ = from._impl_.max_;
    }
  }
  if (from._internal_flags() != 0) {
    _this->_impl_.flags_ = from._impl_.flags_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HistogramDataPoint::CopyFrom(const HistogramDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.HistogramDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HistogramDataPoint::InternalSwap(HistogramDataPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bucket_counts_.InternalSwap(&other->_impl_.bucket_counts_);
  _impl_.explicit_bounds_.InternalSwap(&other->_impl_.explicit_bounds_);
  _impl_.exemplars_.InternalSwap(&other->_impl_.exemplars_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.flags_)
      + sizeof(HistogramDataPoint::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(HistogramDataPoint, _impl_.start_time_unix_nano_)>(
          reinterpret_cast<char*>(&_impl_.start_time_unix_nano_),
          reinterpret_cast<char*>(&other->_impl_.start_time_unix_nano_));
}

::google::protobuf::Metadata HistogramDataPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ExponentialHistogramDataPoint_Buckets::_Internal {
 public:
};

ExponentialHistogramDataPoint_Buckets::ExponentialHistogramDataPoint_Buckets(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
}
inline PROTOBUF_NDEBUG_INLINE ExponentialHistogramDataPoint_Buckets::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets& from_msg)
      : bucket_counts_{visibility, arena, from.bucket_counts_},
        _bucket_counts_cached_byte_size_{0},
        _cached_size_{0} {}

ExponentialHistogramDataPoint_Buckets::ExponentialHistogramDataPoint_Buckets(
    ::google::protobuf::Arena* arena,
    const ExponentialHistogramDataPoint_Buckets& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ExponentialHistogramDataPoint_Buckets* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.offset_ = from._impl_.offset_;

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
}
inline PROTOBUF_NDEBUG_INLINE ExponentialHistogramDataPoint_Buckets::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : bucket_counts_{visibility, arena},
        _bucket_counts_cached_byte_size_{0},
        _cached_size_{0} {}

inline void ExponentialHistogramDataPoint_Buckets::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.offset_ = {};
}
ExponentialHistogramDataPoint_Buckets::~ExponentialHistogramDataPoint_Buckets() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
  SharedDtor(*this);
}
inline void ExponentialHistogramDataPoint_Buckets::SharedDtor(MessageLite& self) {
  ExponentialHistogramDataPoint_Buckets& this_ = static_cast<ExponentialHistogramDataPoint_Buckets&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ExponentialHistogramDataPoint_Buckets::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ExponentialHistogramDataPoint_Buckets(arena);
}
constexpr auto ExponentialHistogramDataPoint_Buckets::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint_Buckets, _impl_.bucket_counts_) +
          decltype(ExponentialHistogramDataPoint_Buckets::_impl_.bucket_counts_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ExponentialHistogramDataPoint_Buckets), alignof(ExponentialHistogramDataPoint_Buckets), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ExponentialHistogramDataPoint_Buckets::PlacementNew_,
                                 sizeof(ExponentialHistogramDataPoint_Buckets),
                                 alignof(ExponentialHistogramDataPoint_Buckets));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ExponentialHistogramDataPoint_Buckets::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ExponentialHistogramDataPoint_Buckets_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ExponentialHistogramDataPoint_Buckets::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ExponentialHistogramDataPoint_Buckets>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ExponentialHistogramDataPoint_Buckets::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ExponentialHistogramDataPoint_Buckets>(), &ExponentialHistogramDataPoint_Buckets::ByteSizeLong,
            &ExponentialHistogramDataPoint_Buckets::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint_Buckets, _impl_._cached_size_),
        false,
    },
    &ExponentialHistogramDataPoint_Buckets::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ExponentialHistogramDataPoint_Buckets::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ExponentialHistogramDataPoint_Buckets::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated uint64 bucket_counts = 2;
    {::_pbi::TcParser::FastV64P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint_Buckets, _impl_.bucket_counts_)}},
    // sint32 offset = 1;
    {::_pbi::TcParser::FastZ32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint_Buckets, _impl_.offset_)}},
  }}, {{
    65535, 65535
  }}, {{
    // sint32 offset = 1;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint_Buckets, _impl_.offset_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // repeated uint64 bucket_counts = 2;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint_Buckets, _impl_.bucket_counts_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ExponentialHistogramDataPoint_Buckets::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_counts_.Clear();
  _impl_.offset_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ExponentialHistogramDataPoint_Buckets::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ExponentialHistogramDataPoint_Buckets& this_ = static_cast<const ExponentialHistogramDataPoint_Buckets&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ExponentialHistogramDataPoint_Buckets::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ExponentialHistogramDataPoint_Buckets& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // sint32 offset = 1;
          if (this_._internal_offset() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                1, this_._internal_offset(), target);
          }

          // repeated uint64 bucket_counts = 2;
          {
            int byte_size = this_._impl_._bucket_counts_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt64Packed(
                  2, this_._internal_bucket_counts(), byte_size, target);
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ExponentialHistogramDataPoint_Buckets::ByteSizeLong(const MessageLite& base) {
          const ExponentialHistogramDataPoint_Buckets& this_ = static_cast<const ExponentialHistogramDataPoint_Buckets&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ExponentialHistogramDataPoint_Buckets::ByteSizeLong() const {
          const ExponentialHistogramDataPoint_Buckets& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated uint64 bucket_counts = 2;
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt64SizeWithPackedTagSize(
                      this_._internal_bucket_counts(), 1,
                      this_._impl_._bucket_counts_cached_byte_size_);
            }
          }
           {
            // sint32 offset = 1;
            if (this_._internal_offset() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_offset());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ExponentialHistogramDataPoint_Buckets::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ExponentialHistogramDataPoint_Buckets*>(&to_msg);
  auto& from = static_cast<const ExponentialHistogramDataPoint_Buckets&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bucket_counts()->MergeFrom(from._internal_bucket_counts());
  if (from._internal_offset() != 0) {
    _this->_impl_.offset_ = from._impl_.offset_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExponentialHistogramDataPoint_Buckets::CopyFrom(const ExponentialHistogramDataPoint_Buckets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ExponentialHistogramDataPoint_Buckets::InternalSwap(ExponentialHistogramDataPoint_Buckets* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bucket_counts_.InternalSwap(&other->_impl_.bucket_counts_);
        swap(_impl_.offset_, other->_impl_.offset_);
}

::google::protobuf::Metadata ExponentialHistogramDataPoint_Buckets::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ExponentialHistogramDataPoint::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ExponentialHistogramDataPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_._has_bits_);
};

void ExponentialHistogramDataPoint::clear_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributes_.Clear();
}
ExponentialHistogramDataPoint::ExponentialHistogramDataPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
}
inline PROTOBUF_NDEBUG_INLINE ExponentialHistogramDataPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        attributes_{visibility, arena, from.attributes_},
        exemplars_{visibility, arena, from.exemplars_} {}

ExponentialHistogramDataPoint::ExponentialHistogramDataPoint(
    ::google::protobuf::Arena* arena,
    const ExponentialHistogramDataPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ExponentialHistogramDataPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.positive_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets>(
                              arena, *from._impl_.positive_)
                        : nullptr;
  _impl_.negative_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets>(
                              arena, *from._impl_.negative_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_unix_nano_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_time_unix_nano_),
           offsetof(Impl_, zero_threshold_) -
               offsetof(Impl_, start_time_unix_nano_) +
               sizeof(Impl_::zero_threshold_));

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
}
inline PROTOBUF_NDEBUG_INLINE ExponentialHistogramDataPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        attributes_{visibility, arena},
        exemplars_{visibility, arena} {}

inline void ExponentialHistogramDataPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, positive_),
           0,
           offsetof(Impl_, zero_threshold_) -
               offsetof(Impl_, positive_) +
               sizeof(Impl_::zero_threshold_));
}
ExponentialHistogramDataPoint::~ExponentialHistogramDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  SharedDtor(*this);
}
inline void ExponentialHistogramDataPoint::SharedDtor(MessageLite& self) {
  ExponentialHistogramDataPoint& this_ = static_cast<ExponentialHistogramDataPoint&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.positive_;
  delete this_._impl_.negative_;
  this_._impl_.~Impl_();
}

inline void* ExponentialHistogramDataPoint::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ExponentialHistogramDataPoint(arena);
}
constexpr auto ExponentialHistogramDataPoint::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.attributes_) +
          decltype(ExponentialHistogramDataPoint::_impl_.attributes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.exemplars_) +
          decltype(ExponentialHistogramDataPoint::_impl_.exemplars_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ExponentialHistogramDataPoint), alignof(ExponentialHistogramDataPoint), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ExponentialHistogramDataPoint::PlacementNew_,
                                 sizeof(ExponentialHistogramDataPoint),
                                 alignof(ExponentialHistogramDataPoint));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ExponentialHistogramDataPoint::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ExponentialHistogramDataPoint_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ExponentialHistogramDataPoint::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ExponentialHistogramDataPoint>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ExponentialHistogramDataPoint::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ExponentialHistogramDataPoint>(), &ExponentialHistogramDataPoint::ByteSizeLong,
            &ExponentialHistogramDataPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_._cached_size_),
        false,
    },
    &ExponentialHistogramDataPoint::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ExponentialHistogramDataPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 4, 0, 2> ExponentialHistogramDataPoint::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.attributes_)}},
    // fixed64 start_time_unix_nano = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.start_time_unix_nano_)}},
    // fixed64 time_unix_nano = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.time_unix_nano_)}},
    // fixed64 count = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.count_)}},
    // optional double sum = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 2, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.sum_)}},
    // sint32 scale = 6;
    {::_pbi::TcParser::FastZ32S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.scale_)}},
    // fixed64 zero_count = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.zero_count_)}},
    // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 0, 1, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.positive_)}},
    // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 2, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.negative_)}},
    // uint32 flags = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ExponentialHistogramDataPoint, _impl_.flags_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.flags_)}},
    // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;
    {::_pbi::TcParser::FastMtR1,
     {90, 63, 3, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.exemplars_)}},
    // optional double min = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 3, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.min_)}},
    // optional double max = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 4, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.max_)}},
    // double zero_threshold = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 63, 0, PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.zero_threshold_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.attributes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // fixed64 start_time_unix_nano = 2;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.start_time_unix_nano_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // fixed64 time_unix_nano = 3;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.time_unix_nano_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // fixed64 count = 4;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // optional double sum = 5;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.sum_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // sint32 scale = 6;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.scale_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kSInt32)},
    // fixed64 zero_count = 7;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.zero_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.positive_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.negative_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 flags = 10;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.flags_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.exemplars_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double min = 12;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.min_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double max = 13;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.max_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double zero_threshold = 14;
    {PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.zero_threshold_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValue>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::Exemplar>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ExponentialHistogramDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.exemplars_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.positive_ != nullptr);
      _impl_.positive_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.negative_ != nullptr);
      _impl_.negative_->Clear();
    }
  }
  ::memset(&_impl_.start_time_unix_nano_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.start_time_unix_nano_)) + sizeof(_impl_.count_));
  _impl_.sum_ = 0;
  ::memset(&_impl_.zero_count_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.zero_count_)) + sizeof(_impl_.flags_));
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.min_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_) -
        reinterpret_cast<char*>(&_impl_.min_)) + sizeof(_impl_.max_));
  }
  _impl_.zero_threshold_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ExponentialHistogramDataPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ExponentialHistogramDataPoint& this_ = static_cast<const ExponentialHistogramDataPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ExponentialHistogramDataPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ExponentialHistogramDataPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_attributes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_attributes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // fixed64 start_time_unix_nano = 2;
          if (this_._internal_start_time_unix_nano() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                2, this_._internal_start_time_unix_nano(), target);
          }

          // fixed64 time_unix_nano = 3;
          if (this_._internal_time_unix_nano() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                3, this_._internal_time_unix_nano(), target);
          }

          // fixed64 count = 4;
          if (this_._internal_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                4, this_._internal_count(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional double sum = 5;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_sum(), target);
          }

          // sint32 scale = 6;
          if (this_._internal_scale() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
                6, this_._internal_scale(), target);
          }

          // fixed64 zero_count = 7;
          if (this_._internal_zero_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                7, this_._internal_zero_count(), target);
          }

          // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.positive_, this_._impl_.positive_->GetCachedSize(), target,
                stream);
          }

          // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.negative_, this_._impl_.negative_->GetCachedSize(), target,
                stream);
          }

          // uint32 flags = 10;
          if (this_._internal_flags() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                10, this_._internal_flags(), target);
          }

          // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_exemplars_size());
               i < n; i++) {
            const auto& repfield = this_._internal_exemplars().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    11, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // optional double min = 12;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                12, this_._internal_min(), target);
          }

          // optional double max = 13;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                13, this_._internal_max(), target);
          }

          // double zero_threshold = 14;
          if (::absl::bit_cast<::uint64_t>(this_._internal_zero_threshold()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                14, this_._internal_zero_threshold(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ExponentialHistogramDataPoint::ByteSizeLong(const MessageLite& base) {
          const ExponentialHistogramDataPoint& this_ = static_cast<const ExponentialHistogramDataPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ExponentialHistogramDataPoint::ByteSizeLong() const {
          const ExponentialHistogramDataPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;
            {
              total_size += 1UL * this_._internal_attributes_size();
              for (const auto& msg : this_._internal_attributes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;
            {
              total_size += 1UL * this_._internal_exemplars_size();
              for (const auto& msg : this_._internal_exemplars()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.positive_);
            }
            // .opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.negative_);
            }
          }
           {
            // fixed64 start_time_unix_nano = 2;
            if (this_._internal_start_time_unix_nano() != 0) {
              total_size += 9;
            }
            // fixed64 time_unix_nano = 3;
            if (this_._internal_time_unix_nano() != 0) {
              total_size += 9;
            }
            // fixed64 count = 4;
            if (this_._internal_count() != 0) {
              total_size += 9;
            }
          }
           {
            // optional double sum = 5;
            if (cached_has_bits & 0x00000004u) {
              total_size += 9;
            }
          }
           {
            // fixed64 zero_count = 7;
            if (this_._internal_zero_count() != 0) {
              total_size += 9;
            }
            // sint32 scale = 6;
            if (this_._internal_scale() != 0) {
              total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
                  this_._internal_scale());
            }
            // uint32 flags = 10;
            if (this_._internal_flags() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_flags());
            }
          }
          if (cached_has_bits & 0x00000018u) {
            // optional double min = 12;
            if (cached_has_bits & 0x00000008u) {
              total_size += 9;
            }
            // optional double max = 13;
            if (cached_has_bits & 0x00000010u) {
              total_size += 9;
            }
          }
           {
            // double zero_threshold = 14;
            if (::absl::bit_cast<::uint64_t>(this_._internal_zero_threshold()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ExponentialHistogramDataPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ExponentialHistogramDataPoint*>(&to_msg);
  auto& from = static_cast<const ExponentialHistogramDataPoint&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_attributes()->MergeFrom(
      from._internal_attributes());
  _this->_internal_mutable_exemplars()->MergeFrom(
      from._internal_exemplars());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.positive_ != nullptr);
      if (_this->_impl_.positive_ == nullptr) {
        _this->_impl_.positive_ =
            ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets>(arena, *from._impl_.positive_);
      } else {
        _this->_impl_.positive_->MergeFrom(*from._impl_.positive_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.negative_ != nullptr);
      if (_this->_impl_.negative_ == nullptr) {
        _this->_impl_.negative_ =
            ::google::protobuf::Message::CopyConstruct<::opentelemetry::proto::metrics::v1::ExponentialHistogramDataPoint_Buckets>(arena, *from._impl_.negative_);
      } else {
        _this->_impl_.negative_->MergeFrom(*from._impl_.negative_);
      }
    }
  }
  if (from._internal_start_time_unix_nano() != 0) {
    _this->_impl_.start_time_unix_nano_ = from._impl_.start_time_unix_nano_;
  }
  if (from._internal_time_unix_nano() != 0) {
    _this->_impl_.time_unix_nano_ = from._impl_.time_unix_nano_;
  }
  if (from._internal_count() != 0) {
    _this->_impl_.count_ = from._impl_.count_;
  }
  if (cached_has_bits & 0x00000004u) {
    _this->_impl_.sum_ = from._impl_.sum_;
  }
  if (from._internal_zero_count() != 0) {
    _this->_impl_.zero_count_ = from._impl_.zero_count_;
  }
  if (from._internal_scale() != 0) {
    _this->_impl_.scale_ = from._impl_.scale_;
  }
  if (from._internal_flags() != 0) {
    _this->_impl_.flags_ = from._impl_.flags_;
  }
  if (cached_has_bits & 0x00000018u) {
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.min_ = from._impl_.min_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.max_ = from._impl_.max_;
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_zero_threshold()) != 0) {
    _this->_impl_.zero_threshold_ = from._impl_.zero_threshold_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExponentialHistogramDataPoint::CopyFrom(const ExponentialHistogramDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ExponentialHistogramDataPoint::InternalSwap(ExponentialHistogramDataPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  _impl_.exemplars_.InternalSwap(&other->_impl_.exemplars_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.zero_threshold_)
      + sizeof(ExponentialHistogramDataPoint::_impl_.zero_threshold_)
      - PROTOBUF_FIELD_OFFSET(ExponentialHistogramDataPoint, _impl_.positive_)>(
          reinterpret_cast<char*>(&_impl_.positive_),
          reinterpret_cast<char*>(&other->_impl_.positive_));
}

::google::protobuf::Metadata ExponentialHistogramDataPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SummaryDataPoint_ValueAtQuantile::_Internal {
 public:
};

SummaryDataPoint_ValueAtQuantile::SummaryDataPoint_ValueAtQuantile(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
}
SummaryDataPoint_ValueAtQuantile::SummaryDataPoint_ValueAtQuantile(
    ::google::protobuf::Arena* arena, const SummaryDataPoint_ValueAtQuantile& from)
    : SummaryDataPoint_ValueAtQuantile(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SummaryDataPoint_ValueAtQuantile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SummaryDataPoint_ValueAtQuantile::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quantile_),
           0,
           offsetof(Impl_, value_) -
               offsetof(Impl_, quantile_) +
               sizeof(Impl_::value_));
}
SummaryDataPoint_ValueAtQuantile::~SummaryDataPoint_ValueAtQuantile() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
  SharedDtor(*this);
}
inline void SummaryDataPoint_ValueAtQuantile::SharedDtor(MessageLite& self) {
  SummaryDataPoint_ValueAtQuantile& this_ = static_cast<SummaryDataPoint_ValueAtQuantile&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SummaryDataPoint_ValueAtQuantile::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SummaryDataPoint_ValueAtQuantile(arena);
}
constexpr auto SummaryDataPoint_ValueAtQuantile::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SummaryDataPoint_ValueAtQuantile),
                                            alignof(SummaryDataPoint_ValueAtQuantile));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SummaryDataPoint_ValueAtQuantile::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SummaryDataPoint_ValueAtQuantile_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SummaryDataPoint_ValueAtQuantile::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SummaryDataPoint_ValueAtQuantile>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SummaryDataPoint_ValueAtQuantile::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SummaryDataPoint_ValueAtQuantile>(), &SummaryDataPoint_ValueAtQuantile::ByteSizeLong,
            &SummaryDataPoint_ValueAtQuantile::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SummaryDataPoint_ValueAtQuantile, _impl_._cached_size_),
        false,
    },
    &SummaryDataPoint_ValueAtQuantile::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SummaryDataPoint_ValueAtQuantile::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SummaryDataPoint_ValueAtQuantile::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double value = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(SummaryDataPoint_ValueAtQuantile, _impl_.value_)}},
    // double quantile = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SummaryDataPoint_ValueAtQuantile, _impl_.quantile_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double quantile = 1;
    {PROTOBUF_FIELD_OFFSET(SummaryDataPoint_ValueAtQuantile, _impl_.quantile_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double value = 2;
    {PROTOBUF_FIELD_OFFSET(SummaryDataPoint_ValueAtQuantile, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SummaryDataPoint_ValueAtQuantile::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.quantile_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.quantile_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SummaryDataPoint_ValueAtQuantile::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SummaryDataPoint_ValueAtQuantile& this_ = static_cast<const SummaryDataPoint_ValueAtQuantile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SummaryDataPoint_ValueAtQuantile::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SummaryDataPoint_ValueAtQuantile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double quantile = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_quantile()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_quantile(), target);
          }

          // double value = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_value()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_value(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SummaryDataPoint_ValueAtQuantile::ByteSizeLong(const MessageLite& base) {
          const SummaryDataPoint_ValueAtQuantile& this_ = static_cast<const SummaryDataPoint_ValueAtQuantile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SummaryDataPoint_ValueAtQuantile::ByteSizeLong() const {
          const SummaryDataPoint_ValueAtQuantile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // double quantile = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_quantile()) != 0) {
              total_size += 9;
            }
            // double value = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_value()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SummaryDataPoint_ValueAtQuantile::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SummaryDataPoint_ValueAtQuantile*>(&to_msg);
  auto& from = static_cast<const SummaryDataPoint_ValueAtQuantile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_quantile()) != 0) {
    _this->_impl_.quantile_ = from._impl_.quantile_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_value()) != 0) {
    _this->_impl_.value_ = from._impl_.value_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryDataPoint_ValueAtQuantile::CopyFrom(const SummaryDataPoint_ValueAtQuantile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SummaryDataPoint_ValueAtQuantile::InternalSwap(SummaryDataPoint_ValueAtQuantile* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryDataPoint_ValueAtQuantile, _impl_.value_)
      + sizeof(SummaryDataPoint_ValueAtQuantile::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(SummaryDataPoint_ValueAtQuantile, _impl_.quantile_)>(
          reinterpret_cast<char*>(&_impl_.quantile_),
          reinterpret_cast<char*>(&other->_impl_.quantile_));
}

::google::protobuf::Metadata SummaryDataPoint_ValueAtQuantile::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SummaryDataPoint::_Internal {
 public:
};

void SummaryDataPoint::clear_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributes_.Clear();
}
SummaryDataPoint::SummaryDataPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.SummaryDataPoint)
}
inline PROTOBUF_NDEBUG_INLINE SummaryDataPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::SummaryDataPoint& from_msg)
      : quantile_values_{visibility, arena, from.quantile_values_},
        attributes_{visibility, arena, from.attributes_},
        _cached_size_{0} {}

SummaryDataPoint::SummaryDataPoint(
    ::google::protobuf::Arena* arena,
    const SummaryDataPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SummaryDataPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_unix_nano_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_time_unix_nano_),
           offsetof(Impl_, flags_) -
               offsetof(Impl_, start_time_unix_nano_) +
               sizeof(Impl_::flags_));

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.SummaryDataPoint)
}
inline PROTOBUF_NDEBUG_INLINE SummaryDataPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : quantile_values_{visibility, arena},
        attributes_{visibility, arena},
        _cached_size_{0} {}

inline void SummaryDataPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_unix_nano_),
           0,
           offsetof(Impl_, flags_) -
               offsetof(Impl_, start_time_unix_nano_) +
               sizeof(Impl_::flags_));
}
SummaryDataPoint::~SummaryDataPoint() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  SharedDtor(*this);
}
inline void SummaryDataPoint::SharedDtor(MessageLite& self) {
  SummaryDataPoint& this_ = static_cast<SummaryDataPoint&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SummaryDataPoint::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SummaryDataPoint(arena);
}
constexpr auto SummaryDataPoint::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.attributes_) +
          decltype(SummaryDataPoint::_impl_.attributes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.quantile_values_) +
          decltype(SummaryDataPoint::_impl_.quantile_values_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SummaryDataPoint), alignof(SummaryDataPoint), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SummaryDataPoint::PlacementNew_,
                                 sizeof(SummaryDataPoint),
                                 alignof(SummaryDataPoint));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SummaryDataPoint::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SummaryDataPoint_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SummaryDataPoint::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SummaryDataPoint>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SummaryDataPoint::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SummaryDataPoint>(), &SummaryDataPoint::ByteSizeLong,
            &SummaryDataPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_._cached_size_),
        false,
    },
    &SummaryDataPoint::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SummaryDataPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2> SummaryDataPoint::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967041,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::SummaryDataPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 flags = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SummaryDataPoint, _impl_.flags_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.flags_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // fixed64 start_time_unix_nano = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.start_time_unix_nano_)}},
    // fixed64 time_unix_nano = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.time_unix_nano_)}},
    // fixed64 count = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.count_)}},
    // double sum = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.sum_)}},
    // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.quantile_values_)}},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 1, PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.attributes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // fixed64 start_time_unix_nano = 2;
    {PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.start_time_unix_nano_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // fixed64 time_unix_nano = 3;
    {PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.time_unix_nano_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // fixed64 count = 4;
    {PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // double sum = 5;
    {PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.sum_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;
    {PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.quantile_values_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
    {PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.attributes_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 flags = 8;
    {PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.flags_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::SummaryDataPoint_ValueAtQuantile>()},
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValue>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SummaryDataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quantile_values_.Clear();
  _impl_.attributes_.Clear();
  ::memset(&_impl_.start_time_unix_nano_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.start_time_unix_nano_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SummaryDataPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SummaryDataPoint& this_ = static_cast<const SummaryDataPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SummaryDataPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SummaryDataPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.SummaryDataPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // fixed64 start_time_unix_nano = 2;
          if (this_._internal_start_time_unix_nano() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                2, this_._internal_start_time_unix_nano(), target);
          }

          // fixed64 time_unix_nano = 3;
          if (this_._internal_time_unix_nano() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                3, this_._internal_time_unix_nano(), target);
          }

          // fixed64 count = 4;
          if (this_._internal_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                4, this_._internal_count(), target);
          }

          // double sum = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_sum()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_sum(), target);
          }

          // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_quantile_values_size());
               i < n; i++) {
            const auto& repfield = this_._internal_quantile_values().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    6, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_attributes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_attributes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    7, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint32 flags = 8;
          if (this_._internal_flags() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                8, this_._internal_flags(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.SummaryDataPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SummaryDataPoint::ByteSizeLong(const MessageLite& base) {
          const SummaryDataPoint& this_ = static_cast<const SummaryDataPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SummaryDataPoint::ByteSizeLong() const {
          const SummaryDataPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.SummaryDataPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile quantile_values = 6;
            {
              total_size += 1UL * this_._internal_quantile_values_size();
              for (const auto& msg : this_._internal_quantile_values()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .opentelemetry.proto.common.v1.KeyValue attributes = 7;
            {
              total_size += 1UL * this_._internal_attributes_size();
              for (const auto& msg : this_._internal_attributes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // fixed64 start_time_unix_nano = 2;
            if (this_._internal_start_time_unix_nano() != 0) {
              total_size += 9;
            }
            // fixed64 time_unix_nano = 3;
            if (this_._internal_time_unix_nano() != 0) {
              total_size += 9;
            }
            // fixed64 count = 4;
            if (this_._internal_count() != 0) {
              total_size += 9;
            }
            // double sum = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_sum()) != 0) {
              total_size += 9;
            }
            // uint32 flags = 8;
            if (this_._internal_flags() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_flags());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SummaryDataPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SummaryDataPoint*>(&to_msg);
  auto& from = static_cast<const SummaryDataPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_quantile_values()->MergeFrom(
      from._internal_quantile_values());
  _this->_internal_mutable_attributes()->MergeFrom(
      from._internal_attributes());
  if (from._internal_start_time_unix_nano() != 0) {
    _this->_impl_.start_time_unix_nano_ = from._impl_.start_time_unix_nano_;
  }
  if (from._internal_time_unix_nano() != 0) {
    _this->_impl_.time_unix_nano_ = from._impl_.time_unix_nano_;
  }
  if (from._internal_count() != 0) {
    _this->_impl_.count_ = from._impl_.count_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_sum()) != 0) {
    _this->_impl_.sum_ = from._impl_.sum_;
  }
  if (from._internal_flags() != 0) {
    _this->_impl_.flags_ = from._impl_.flags_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryDataPoint::CopyFrom(const SummaryDataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.SummaryDataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SummaryDataPoint::InternalSwap(SummaryDataPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.quantile_values_.InternalSwap(&other->_impl_.quantile_values_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.flags_)
      + sizeof(SummaryDataPoint::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(SummaryDataPoint, _impl_.start_time_unix_nano_)>(
          reinterpret_cast<char*>(&_impl_.start_time_unix_nano_),
          reinterpret_cast<char*>(&other->_impl_.start_time_unix_nano_));
}

::google::protobuf::Metadata SummaryDataPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Exemplar::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::opentelemetry::proto::metrics::v1::Exemplar, _impl_._oneof_case_);
};

void Exemplar::clear_filtered_attributes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filtered_attributes_.Clear();
}
Exemplar::Exemplar(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opentelemetry.proto.metrics.v1.Exemplar)
}
inline PROTOBUF_NDEBUG_INLINE Exemplar::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::opentelemetry::proto::metrics::v1::Exemplar& from_msg)
      : filtered_attributes_{visibility, arena, from.filtered_attributes_},
        span_id_(arena, from.span_id_),
        trace_id_(arena, from.trace_id_),
        value_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Exemplar::Exemplar(
    ::google::protobuf::Arena* arena,
    const Exemplar& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Exemplar* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.time_unix_nano_ = from._impl_.time_unix_nano_;
  switch (value_case()) {
    case VALUE_NOT_SET:
      break;
      case kAsDouble:
        _impl_.value_.as_double_ = from._impl_.value_.as_double_;
        break;
      case kAsInt:
        _impl_.value_.as_int_ = from._impl_.value_.as_int_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:opentelemetry.proto.metrics.v1.Exemplar)
}
inline PROTOBUF_NDEBUG_INLINE Exemplar::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : filtered_attributes_{visibility, arena},
        span_id_(arena),
        trace_id_(arena),
        value_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Exemplar::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.time_unix_nano_ = {};
}
Exemplar::~Exemplar() {
  // @@protoc_insertion_point(destructor:opentelemetry.proto.metrics.v1.Exemplar)
  SharedDtor(*this);
}
inline void Exemplar::SharedDtor(MessageLite& self) {
  Exemplar& this_ = static_cast<Exemplar&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.span_id_.Destroy();
  this_._impl_.trace_id_.Destroy();
  if (this_.has_value()) {
    this_.clear_value();
  }
  this_._impl_.~Impl_();
}

void Exemplar::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:opentelemetry.proto.metrics.v1.Exemplar)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (value_case()) {
    case kAsDouble: {
      // No need to clear
      break;
    }
    case kAsInt: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


inline void* Exemplar::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Exemplar(arena);
}
constexpr auto Exemplar::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Exemplar, _impl_.filtered_attributes_) +
          decltype(Exemplar::_impl_.filtered_attributes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Exemplar), alignof(Exemplar), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Exemplar::PlacementNew_,
                                 sizeof(Exemplar),
                                 alignof(Exemplar));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Exemplar::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Exemplar_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Exemplar::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Exemplar>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Exemplar::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Exemplar>(), &Exemplar::ByteSizeLong,
            &Exemplar::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Exemplar, _impl_._cached_size_),
        false,
    },
    &Exemplar::kDescriptorMethods,
    &descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Exemplar::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 6, 1, 0, 2> Exemplar::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967169,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opentelemetry::proto::metrics::v1::Exemplar>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes span_id = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Exemplar, _impl_.span_id_)}},
    // bytes trace_id = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Exemplar, _impl_.trace_id_)}},
    // fixed64 time_unix_nano = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Exemplar, _impl_.time_unix_nano_)}},
    // repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Exemplar, _impl_.filtered_attributes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // fixed64 time_unix_nano = 2;
    {PROTOBUF_FIELD_OFFSET(Exemplar, _impl_.time_unix_nano_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFixed64)},
    // double as_double = 3;
    {PROTOBUF_FIELD_OFFSET(Exemplar, _impl_.value_.as_double_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // bytes span_id = 4;
    {PROTOBUF_FIELD_OFFSET(Exemplar, _impl_.span_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // bytes trace_id = 5;
    {PROTOBUF_FIELD_OFFSET(Exemplar, _impl_.trace_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // sfixed64 as_int = 6;
    {PROTOBUF_FIELD_OFFSET(Exemplar, _impl_.value_.as_int_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kSFixed64)},
    // repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;
    {PROTOBUF_FIELD_OFFSET(Exemplar, _impl_.filtered_attributes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::opentelemetry::proto::common::v1::KeyValue>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Exemplar::Clear() {
// @@protoc_insertion_point(message_clear_start:opentelemetry.proto.metrics.v1.Exemplar)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filtered_attributes_.Clear();
  _impl_.span_id_.ClearToEmpty();
  _impl_.trace_id_.ClearToEmpty();
  _impl_.time_unix_nano_ = ::uint64_t{0u};
  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Exemplar::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Exemplar& this_ = static_cast<const Exemplar&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Exemplar::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Exemplar& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:opentelemetry.proto.metrics.v1.Exemplar)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // fixed64 time_unix_nano = 2;
          if (this_._internal_time_unix_nano() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
                2, this_._internal_time_unix_nano(), target);
          }

          // double as_double = 3;
          if (this_.value_case() == kAsDouble) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_as_double(), target);
          }

          // bytes span_id = 4;
          if (!this_._internal_span_id().empty()) {
            const std::string& _s = this_._internal_span_id();
            target = stream->WriteBytesMaybeAliased(4, _s, target);
          }

          // bytes trace_id = 5;
          if (!this_._internal_trace_id().empty()) {
            const std::string& _s = this_._internal_trace_id();
            target = stream->WriteBytesMaybeAliased(5, _s, target);
          }

          // sfixed64 as_int = 6;
          if (this_.value_case() == kAsInt) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(
                6, this_._internal_as_int(), target);
          }

          // repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_filtered_attributes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_filtered_attributes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    7, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:opentelemetry.proto.metrics.v1.Exemplar)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Exemplar::ByteSizeLong(const MessageLite& base) {
          const Exemplar& this_ = static_cast<const Exemplar&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Exemplar::ByteSizeLong() const {
          const Exemplar& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:opentelemetry.proto.metrics.v1.Exemplar)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .opentelemetry.proto.common.v1.KeyValue filtered_attributes = 7;
            {
              total_size += 1UL * this_._internal_filtered_attributes_size();
              for (const auto& msg : this_._internal_filtered_attributes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // bytes span_id = 4;
            if (!this_._internal_span_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_span_id());
            }
            // bytes trace_id = 5;
            if (!this_._internal_trace_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_trace_id());
            }
            // fixed64 time_unix_nano = 2;
            if (this_._internal_time_unix_nano() != 0) {
              total_size += 9;
            }
          }
          switch (this_.value_case()) {
            // double as_double = 3;
            case kAsDouble: {
              total_size += 9;
              break;
            }
            // sfixed64 as_int = 6;
            case kAsInt: {
              total_size += 9;
              break;
            }
            case VALUE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Exemplar::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Exemplar*>(&to_msg);
  auto& from = static_cast<const Exemplar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opentelemetry.proto.metrics.v1.Exemplar)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_filtered_attributes()->MergeFrom(
      from._internal_filtered_attributes());
  if (!from._internal_span_id().empty()) {
    _this->_internal_set_span_id(from._internal_span_id());
  }
  if (!from._internal_trace_id().empty()) {
    _this->_internal_set_trace_id(from._internal_trace_id());
  }
  if (from._internal_time_unix_nano() != 0) {
    _this->_impl_.time_unix_nano_ = from._impl_.time_unix_nano_;
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_value();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kAsDouble: {
        _this->_impl_.value_.as_double_ = from._impl_.value_.as_double_;
        break;
      }
      case kAsInt: {
        _this->_impl_.value_.as_int_ = from._impl_.value_.as_int_;
        break;
      }
      case VALUE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Exemplar::CopyFrom(const Exemplar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opentelemetry.proto.metrics.v1.Exemplar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Exemplar::InternalSwap(Exemplar* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.filtered_attributes_.InternalSwap(&other->_impl_.filtered_attributes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.span_id_, &other->_impl_.span_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trace_id_, &other->_impl_.trace_id_, arena);
        swap(_impl_.time_unix_nano_, other->_impl_.time_unix_nano_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Exemplar::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace metrics
}  // namespace proto
}  // namespace opentelemetry
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_opentelemetry_2fproto_2fmetrics_2fv1_2fmetrics_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
