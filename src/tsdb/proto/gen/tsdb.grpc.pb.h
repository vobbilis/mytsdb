// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tsdb.proto
#ifndef GRPC_tsdb_2eproto__INCLUDED
#define GRPC_tsdb_2eproto__INCLUDED

#include "tsdb.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace tsdb {
namespace proto {

// Service for querying time series data
class TSDBService final {
 public:
  static constexpr char const* service_full_name() {
    return "tsdb.proto.TSDBService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get all label names
    virtual ::grpc::Status GetLabelNames(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::tsdb::proto::LabelNamesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::LabelNamesResponse>> AsyncGetLabelNames(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::LabelNamesResponse>>(AsyncGetLabelNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::LabelNamesResponse>> PrepareAsyncGetLabelNames(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::LabelNamesResponse>>(PrepareAsyncGetLabelNamesRaw(context, request, cq));
    }
    // Get values for a specific label
    virtual ::grpc::Status GetLabelValues(::grpc::ClientContext* context, const ::tsdb::proto::LabelValuesRequest& request, ::tsdb::proto::LabelValuesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::LabelValuesResponse>> AsyncGetLabelValues(::grpc::ClientContext* context, const ::tsdb::proto::LabelValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::LabelValuesResponse>>(AsyncGetLabelValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::LabelValuesResponse>> PrepareAsyncGetLabelValues(::grpc::ClientContext* context, const ::tsdb::proto::LabelValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::LabelValuesResponse>>(PrepareAsyncGetLabelValuesRaw(context, request, cq));
    }
    // Get time series matching the query parameters
    virtual ::grpc::Status GetSeries(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::tsdb::proto::SeriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::SeriesResponse>> AsyncGetSeries(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::SeriesResponse>>(AsyncGetSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::SeriesResponse>> PrepareAsyncGetSeries(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::SeriesResponse>>(PrepareAsyncGetSeriesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Get all label names
      virtual void GetLabelNames(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams* request, ::tsdb::proto::LabelNamesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLabelNames(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams* request, ::tsdb::proto::LabelNamesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get values for a specific label
      virtual void GetLabelValues(::grpc::ClientContext* context, const ::tsdb::proto::LabelValuesRequest* request, ::tsdb::proto::LabelValuesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLabelValues(::grpc::ClientContext* context, const ::tsdb::proto::LabelValuesRequest* request, ::tsdb::proto::LabelValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get time series matching the query parameters
      virtual void GetSeries(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams* request, ::tsdb::proto::SeriesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSeries(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams* request, ::tsdb::proto::SeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::LabelNamesResponse>* AsyncGetLabelNamesRaw(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::LabelNamesResponse>* PrepareAsyncGetLabelNamesRaw(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::LabelValuesResponse>* AsyncGetLabelValuesRaw(::grpc::ClientContext* context, const ::tsdb::proto::LabelValuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::LabelValuesResponse>* PrepareAsyncGetLabelValuesRaw(::grpc::ClientContext* context, const ::tsdb::proto::LabelValuesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::SeriesResponse>* AsyncGetSeriesRaw(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tsdb::proto::SeriesResponse>* PrepareAsyncGetSeriesRaw(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetLabelNames(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::tsdb::proto::LabelNamesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsdb::proto::LabelNamesResponse>> AsyncGetLabelNames(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsdb::proto::LabelNamesResponse>>(AsyncGetLabelNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsdb::proto::LabelNamesResponse>> PrepareAsyncGetLabelNames(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsdb::proto::LabelNamesResponse>>(PrepareAsyncGetLabelNamesRaw(context, request, cq));
    }
    ::grpc::Status GetLabelValues(::grpc::ClientContext* context, const ::tsdb::proto::LabelValuesRequest& request, ::tsdb::proto::LabelValuesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsdb::proto::LabelValuesResponse>> AsyncGetLabelValues(::grpc::ClientContext* context, const ::tsdb::proto::LabelValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsdb::proto::LabelValuesResponse>>(AsyncGetLabelValuesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsdb::proto::LabelValuesResponse>> PrepareAsyncGetLabelValues(::grpc::ClientContext* context, const ::tsdb::proto::LabelValuesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsdb::proto::LabelValuesResponse>>(PrepareAsyncGetLabelValuesRaw(context, request, cq));
    }
    ::grpc::Status GetSeries(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::tsdb::proto::SeriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsdb::proto::SeriesResponse>> AsyncGetSeries(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsdb::proto::SeriesResponse>>(AsyncGetSeriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsdb::proto::SeriesResponse>> PrepareAsyncGetSeries(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tsdb::proto::SeriesResponse>>(PrepareAsyncGetSeriesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetLabelNames(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams* request, ::tsdb::proto::LabelNamesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLabelNames(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams* request, ::tsdb::proto::LabelNamesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLabelValues(::grpc::ClientContext* context, const ::tsdb::proto::LabelValuesRequest* request, ::tsdb::proto::LabelValuesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLabelValues(::grpc::ClientContext* context, const ::tsdb::proto::LabelValuesRequest* request, ::tsdb::proto::LabelValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSeries(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams* request, ::tsdb::proto::SeriesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSeries(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams* request, ::tsdb::proto::SeriesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tsdb::proto::LabelNamesResponse>* AsyncGetLabelNamesRaw(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsdb::proto::LabelNamesResponse>* PrepareAsyncGetLabelNamesRaw(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsdb::proto::LabelValuesResponse>* AsyncGetLabelValuesRaw(::grpc::ClientContext* context, const ::tsdb::proto::LabelValuesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsdb::proto::LabelValuesResponse>* PrepareAsyncGetLabelValuesRaw(::grpc::ClientContext* context, const ::tsdb::proto::LabelValuesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsdb::proto::SeriesResponse>* AsyncGetSeriesRaw(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tsdb::proto::SeriesResponse>* PrepareAsyncGetSeriesRaw(::grpc::ClientContext* context, const ::tsdb::proto::QueryParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetLabelNames_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLabelValues_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSeries_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get all label names
    virtual ::grpc::Status GetLabelNames(::grpc::ServerContext* context, const ::tsdb::proto::QueryParams* request, ::tsdb::proto::LabelNamesResponse* response);
    // Get values for a specific label
    virtual ::grpc::Status GetLabelValues(::grpc::ServerContext* context, const ::tsdb::proto::LabelValuesRequest* request, ::tsdb::proto::LabelValuesResponse* response);
    // Get time series matching the query parameters
    virtual ::grpc::Status GetSeries(::grpc::ServerContext* context, const ::tsdb::proto::QueryParams* request, ::tsdb::proto::SeriesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLabelNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLabelNames() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetLabelNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelNames(::grpc::ServerContext* /*context*/, const ::tsdb::proto::QueryParams* /*request*/, ::tsdb::proto::LabelNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLabelNames(::grpc::ServerContext* context, ::tsdb::proto::QueryParams* request, ::grpc::ServerAsyncResponseWriter< ::tsdb::proto::LabelNamesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLabelValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLabelValues() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetLabelValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelValues(::grpc::ServerContext* /*context*/, const ::tsdb::proto::LabelValuesRequest* /*request*/, ::tsdb::proto::LabelValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLabelValues(::grpc::ServerContext* context, ::tsdb::proto::LabelValuesRequest* request, ::grpc::ServerAsyncResponseWriter< ::tsdb::proto::LabelValuesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSeries() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSeries(::grpc::ServerContext* /*context*/, const ::tsdb::proto::QueryParams* /*request*/, ::tsdb::proto::SeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSeries(::grpc::ServerContext* context, ::tsdb::proto::QueryParams* request, ::grpc::ServerAsyncResponseWriter< ::tsdb::proto::SeriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetLabelNames<WithAsyncMethod_GetLabelValues<WithAsyncMethod_GetSeries<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetLabelNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLabelNames() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::tsdb::proto::QueryParams, ::tsdb::proto::LabelNamesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tsdb::proto::QueryParams* request, ::tsdb::proto::LabelNamesResponse* response) { return this->GetLabelNames(context, request, response); }));}
    void SetMessageAllocatorFor_GetLabelNames(
        ::grpc::MessageAllocator< ::tsdb::proto::QueryParams, ::tsdb::proto::LabelNamesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tsdb::proto::QueryParams, ::tsdb::proto::LabelNamesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLabelNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelNames(::grpc::ServerContext* /*context*/, const ::tsdb::proto::QueryParams* /*request*/, ::tsdb::proto::LabelNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLabelNames(
      ::grpc::CallbackServerContext* /*context*/, const ::tsdb::proto::QueryParams* /*request*/, ::tsdb::proto::LabelNamesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLabelValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLabelValues() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::tsdb::proto::LabelValuesRequest, ::tsdb::proto::LabelValuesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tsdb::proto::LabelValuesRequest* request, ::tsdb::proto::LabelValuesResponse* response) { return this->GetLabelValues(context, request, response); }));}
    void SetMessageAllocatorFor_GetLabelValues(
        ::grpc::MessageAllocator< ::tsdb::proto::LabelValuesRequest, ::tsdb::proto::LabelValuesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tsdb::proto::LabelValuesRequest, ::tsdb::proto::LabelValuesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLabelValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelValues(::grpc::ServerContext* /*context*/, const ::tsdb::proto::LabelValuesRequest* /*request*/, ::tsdb::proto::LabelValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLabelValues(
      ::grpc::CallbackServerContext* /*context*/, const ::tsdb::proto::LabelValuesRequest* /*request*/, ::tsdb::proto::LabelValuesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSeries() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::tsdb::proto::QueryParams, ::tsdb::proto::SeriesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tsdb::proto::QueryParams* request, ::tsdb::proto::SeriesResponse* response) { return this->GetSeries(context, request, response); }));}
    void SetMessageAllocatorFor_GetSeries(
        ::grpc::MessageAllocator< ::tsdb::proto::QueryParams, ::tsdb::proto::SeriesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tsdb::proto::QueryParams, ::tsdb::proto::SeriesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSeries(::grpc::ServerContext* /*context*/, const ::tsdb::proto::QueryParams* /*request*/, ::tsdb::proto::SeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::tsdb::proto::QueryParams* /*request*/, ::tsdb::proto::SeriesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetLabelNames<WithCallbackMethod_GetLabelValues<WithCallbackMethod_GetSeries<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetLabelNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLabelNames() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetLabelNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelNames(::grpc::ServerContext* /*context*/, const ::tsdb::proto::QueryParams* /*request*/, ::tsdb::proto::LabelNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLabelValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLabelValues() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetLabelValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelValues(::grpc::ServerContext* /*context*/, const ::tsdb::proto::LabelValuesRequest* /*request*/, ::tsdb::proto::LabelValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSeries() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSeries(::grpc::ServerContext* /*context*/, const ::tsdb::proto::QueryParams* /*request*/, ::tsdb::proto::SeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLabelNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLabelNames() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetLabelNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelNames(::grpc::ServerContext* /*context*/, const ::tsdb::proto::QueryParams* /*request*/, ::tsdb::proto::LabelNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLabelNames(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLabelValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLabelValues() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetLabelValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelValues(::grpc::ServerContext* /*context*/, const ::tsdb::proto::LabelValuesRequest* /*request*/, ::tsdb::proto::LabelValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLabelValues(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSeries() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSeries(::grpc::ServerContext* /*context*/, const ::tsdb::proto::QueryParams* /*request*/, ::tsdb::proto::SeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSeries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLabelNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLabelNames() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLabelNames(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLabelNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelNames(::grpc::ServerContext* /*context*/, const ::tsdb::proto::QueryParams* /*request*/, ::tsdb::proto::LabelNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLabelNames(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLabelValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLabelValues() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLabelValues(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLabelValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLabelValues(::grpc::ServerContext* /*context*/, const ::tsdb::proto::LabelValuesRequest* /*request*/, ::tsdb::proto::LabelValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLabelValues(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSeries() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSeries(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSeries(::grpc::ServerContext* /*context*/, const ::tsdb::proto::QueryParams* /*request*/, ::tsdb::proto::SeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSeries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLabelNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLabelNames() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tsdb::proto::QueryParams, ::tsdb::proto::LabelNamesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tsdb::proto::QueryParams, ::tsdb::proto::LabelNamesResponse>* streamer) {
                       return this->StreamedGetLabelNames(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLabelNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLabelNames(::grpc::ServerContext* /*context*/, const ::tsdb::proto::QueryParams* /*request*/, ::tsdb::proto::LabelNamesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLabelNames(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tsdb::proto::QueryParams,::tsdb::proto::LabelNamesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLabelValues : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLabelValues() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tsdb::proto::LabelValuesRequest, ::tsdb::proto::LabelValuesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tsdb::proto::LabelValuesRequest, ::tsdb::proto::LabelValuesResponse>* streamer) {
                       return this->StreamedGetLabelValues(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLabelValues() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLabelValues(::grpc::ServerContext* /*context*/, const ::tsdb::proto::LabelValuesRequest* /*request*/, ::tsdb::proto::LabelValuesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLabelValues(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tsdb::proto::LabelValuesRequest,::tsdb::proto::LabelValuesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSeries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSeries() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tsdb::proto::QueryParams, ::tsdb::proto::SeriesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tsdb::proto::QueryParams, ::tsdb::proto::SeriesResponse>* streamer) {
                       return this->StreamedGetSeries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSeries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSeries(::grpc::ServerContext* /*context*/, const ::tsdb::proto::QueryParams* /*request*/, ::tsdb::proto::SeriesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSeries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tsdb::proto::QueryParams,::tsdb::proto::SeriesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetLabelNames<WithStreamedUnaryMethod_GetLabelValues<WithStreamedUnaryMethod_GetSeries<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetLabelNames<WithStreamedUnaryMethod_GetLabelValues<WithStreamedUnaryMethod_GetSeries<Service > > > StreamedService;
};

}  // namespace proto
}  // namespace tsdb


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_tsdb_2eproto__INCLUDED
