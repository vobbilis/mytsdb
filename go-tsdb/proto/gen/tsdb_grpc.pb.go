// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: tsdb.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TSDBService_GetLabelNames_FullMethodName  = "/tsdb.proto.TSDBService/GetLabelNames"
	TSDBService_GetLabelValues_FullMethodName = "/tsdb.proto.TSDBService/GetLabelValues"
	TSDBService_GetSeries_FullMethodName      = "/tsdb.proto.TSDBService/GetSeries"
)

// TSDBServiceClient is the client API for TSDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for querying time series data
type TSDBServiceClient interface {
	// Get all label names
	GetLabelNames(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*LabelNamesResponse, error)
	// Get values for a specific label
	GetLabelValues(ctx context.Context, in *LabelValuesRequest, opts ...grpc.CallOption) (*LabelValuesResponse, error)
	// Get time series matching the query parameters
	GetSeries(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*SeriesResponse, error)
}

type tSDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTSDBServiceClient(cc grpc.ClientConnInterface) TSDBServiceClient {
	return &tSDBServiceClient{cc}
}

func (c *tSDBServiceClient) GetLabelNames(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*LabelNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LabelNamesResponse)
	err := c.cc.Invoke(ctx, TSDBService_GetLabelNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSDBServiceClient) GetLabelValues(ctx context.Context, in *LabelValuesRequest, opts ...grpc.CallOption) (*LabelValuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LabelValuesResponse)
	err := c.cc.Invoke(ctx, TSDBService_GetLabelValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSDBServiceClient) GetSeries(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*SeriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SeriesResponse)
	err := c.cc.Invoke(ctx, TSDBService_GetSeries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TSDBServiceServer is the server API for TSDBService service.
// All implementations must embed UnimplementedTSDBServiceServer
// for forward compatibility.
//
// Service for querying time series data
type TSDBServiceServer interface {
	// Get all label names
	GetLabelNames(context.Context, *QueryParams) (*LabelNamesResponse, error)
	// Get values for a specific label
	GetLabelValues(context.Context, *LabelValuesRequest) (*LabelValuesResponse, error)
	// Get time series matching the query parameters
	GetSeries(context.Context, *QueryParams) (*SeriesResponse, error)
	mustEmbedUnimplementedTSDBServiceServer()
}

// UnimplementedTSDBServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTSDBServiceServer struct{}

func (UnimplementedTSDBServiceServer) GetLabelNames(context.Context, *QueryParams) (*LabelNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelNames not implemented")
}
func (UnimplementedTSDBServiceServer) GetLabelValues(context.Context, *LabelValuesRequest) (*LabelValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelValues not implemented")
}
func (UnimplementedTSDBServiceServer) GetSeries(context.Context, *QueryParams) (*SeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeries not implemented")
}
func (UnimplementedTSDBServiceServer) mustEmbedUnimplementedTSDBServiceServer() {}
func (UnimplementedTSDBServiceServer) testEmbeddedByValue()                     {}

// UnsafeTSDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TSDBServiceServer will
// result in compilation errors.
type UnsafeTSDBServiceServer interface {
	mustEmbedUnimplementedTSDBServiceServer()
}

func RegisterTSDBServiceServer(s grpc.ServiceRegistrar, srv TSDBServiceServer) {
	// If the following call pancis, it indicates UnimplementedTSDBServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TSDBService_ServiceDesc, srv)
}

func _TSDBService_GetLabelNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBServiceServer).GetLabelNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSDBService_GetLabelNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBServiceServer).GetLabelNames(ctx, req.(*QueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSDBService_GetLabelValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBServiceServer).GetLabelValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSDBService_GetLabelValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBServiceServer).GetLabelValues(ctx, req.(*LabelValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSDBService_GetSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSDBServiceServer).GetSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TSDBService_GetSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSDBServiceServer).GetSeries(ctx, req.(*QueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

// TSDBService_ServiceDesc is the grpc.ServiceDesc for TSDBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TSDBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tsdb.proto.TSDBService",
	HandlerType: (*TSDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLabelNames",
			Handler:    _TSDBService_GetLabelNames_Handler,
		},
		{
			MethodName: "GetLabelValues",
			Handler:    _TSDBService_GetLabelValues_Handler,
		},
		{
			MethodName: "GetSeries",
			Handler:    _TSDBService_GetSeries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tsdb.proto",
}
